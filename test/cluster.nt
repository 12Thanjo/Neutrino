import "test_plugin";


local cluster = require('cluster');
local num_CPUs = require('os').cpus().length;




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




worker_event = function(data, worker){
    for(i, data.d){
        data.d[i] *= data.d[i];
    };

    return data;
};



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


species Cluster(threads, send){
    if(threads > num_CPUs - 1){
        RangeError |"there are only " num_CPUs - 1 " threads available | got " threads|;
    };

    console.log(|"Master is running (pid: " process.pid ")"|);

    forNum(i, threads){
        cluster.fork();
    };

    this.run = function(data_set, callback){
        local data_set_length = data_set.length;
        local data_set_i = 0;

        local itter_size = Math.floor(data_set_length / threads);
        local arr_count = 0;

        local threads_left = threads;
        local recieved = {};

        // create workers
        forKeys cluster.workers(i, worker){
            send(worker, {
                i: i,
                d: data_set.splice(0, itter_size)
            });

            if(i == threads - 2){
                itter_size = data_set.length + 1;
            };

            worker.on('message', @(data)->{
                recieved[data.i] = data.d;
                threads_left -= 1;
                if(threads_left == 0){
                    forKeys recieved(key, value){
                        try{
                            data_set.push(~value);
                        }catch{
                            data_set = [~data_set, ~value];
                        };
                    };
                    callback();
                };
            });
        };
    };
};



if(cluster.isWorker){
    local worker = cluster.worker;
    process.on("message", @(data)->{
        process.send(worker_event(data, worker));
    });
}else{
    // build data_set
    local data_set = [];
    forNum(i, 5000000){
        data_set.push(i);
    };
    local test = spawn Cluster(11, @(worker, data)->{
        worker.send(data);
    });

    console.time("cluster");
    // console.log(data_set);
    test.run(data_set, @()->{
        test.run(data_set, @()->{
            test.run(data_set, @()->{
                test.run(data_set, @()->{
                    console.timeEnd('cluster');
                    process.exit();
                });
            });
        });
    });
};
















