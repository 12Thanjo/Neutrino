let cluster=require('cluster');;let num_CPUs=require('os').cpus().length;worker_event=function(data,worker){let $arr_length=data.d.length;for(var i=0;i<$arr_length;i++){data.d[i]*=data.d[i];};return data;};let Cluster=function(threads,send){let private={};Cluster.$map.set(threads,this);if(threads>num_CPUs-1){throw RangeError("there are only "+(num_CPUs-1)+" threads available | got "+(threads));};console.log("Master is running (pid: "+(process.pid)+")");for(var i=0;i<threads;i++){cluster.fork();};this.run=function(data_set,callback){let data_set_length=data_set.length;let data_set_i=0;let itter_size=Math.floor(data_set_length/threads);;let arr_count=0;let threads_left=threads;let recieved={};for(let i in cluster.workers){let worker=cluster.workers[i];send(worker,{i:i,d:data_set.splice(0,itter_size)});if(i==threads-2){itter_size=data_set.length+1;};worker.on('message',(data)=>{recieved[data.i]=data.d;threads_left-=1;if(threads_left==0){for(let key in recieved){let value=recieved[key];try{data_set.push(...value);}catch{data_set=[...data_set,...value];};};callback();};});};};};Cluster.$map=new Map();Cluster.get=function(id){return Cluster.$map.get(id);};Cluster.has=function(id){return Cluster.$map.has(id);};Cluster.forEach=function(cb){Cluster.$map.forEach(cb);};Cluster.delete=function(cb){Cluster.$map.delete(cb);};if(cluster.isWorker){let worker=cluster.worker;process.on("message",(data)=>{process.send(worker_event(data,worker));});}else{let data_set=[];for(var i=0;i<5000000;i++){data_set.push(i);};let test=new Cluster(11,(worker,data)=>{worker.send(data);});;console.time("cluster");test.run(data_set,()=>{test.run(data_set,()=>{test.run(data_set,()=>{test.run(data_set,()=>{console.timeEnd('cluster');process.exit();});});});});};