let foo=(-1);let integer=12;var negative_and_decimal=-12.4;globalThis.var3={string:"Hello World",array:[1.2,"3",["2D"],{foo:"bar"}],boolean:[true,false],foo:"bar"};var3.nulish=[null,undefined];let assert=function(title,value,condition){if(condition()==value){console.log("\x1b[32m✓ "+(title)+"\x1b[37m");}else{console.log("\x1b[31m✘ "+(title)+"\x1b[37m");};};console.log("Variable Initialization:");assert('local',true,()=>{let local_var=true;return local_var;});assert('regional',true,()=>{var regional_var=true;return regional_var;});assert('global',true,()=>{globalThis.global_var=true;return global_var;});console.log();console.log('Modules:');assert('import (.nti)',true,()=>{return true;});console.log();console.log("Misc: ");assert('function',true,()=>{var func=function(param){return param;};return func(true);});assert('arrow function (@()->{})',true,()=>{var a_func=(param)=>{return param;};return a_func(true);});assert('spread (~)',1,()=>{let arr=[1];let spread_arr=[...arr];return spread_arr[0];});assert('concat (| |)',true,()=>{let foo="c";let bar="d";let str="a"+(5)+"b"+(foo)+(bar);return (str=="a5bcd");});console.log();console.log("Arithmetic Operators:");assert('addition (+)',10,()=>{return (10);});assert('subtraction (-)',2,()=>{return (2);});assert('multiplication (*)',24,()=>{return (24);});assert('division (/)',1.5,()=>{return (1.5);});assert('modulus (%)',2,()=>{return (2);});console.log();console.log("Assignment Operators:");var num=10;assert('addition (+=)',14,()=>{num+=4;return num;});assert('subtraction (-=)',12,()=>{num-=2;return num;});assert('multiplication (*=)',24,()=>{num*=2;return num;});assert('division (/=)',6,()=>{num/=4;return num;});assert('modulus (%=)',2,()=>{num%=4;return num;});console.log();console.log("Reverse Assignment Operators:");var num=10;var str="foo";assert('addition (=+)','barfoo',()=>{str="bar"+str;return str;});assert('subtraction (=-)',-8,()=>{num=2-num;return num;});assert('multiplication (=*)',-16,()=>{num=2*num;return num;});assert('division (=/)',2,()=>{num=-32/num;return num;});assert('modulus (=%)',1,()=>{num=5%num;return num;});console.log();console.log("Special Assignment Operators:");var num=5;assert("set greater (=>) smaller",5,()=>{if(3>num){num=3};return num;});assert("set greater (=>) larger",8,()=>{if(8>num){num=8};return num;});assert("set lesser (=<) smaller",3,()=>{if(3<num){num=3};return num;});assert("set lesser (=<) larger",3,()=>{if(8<num){num=8};return num;});console.log();console.log("Conditionals:");assert('if',true,()=>{if(true){return true;};});assert('else',true,()=>{if(false){return false;}else{return true;};});assert('else if',true,()=>{if(false){return false;}else if(true){return true;}else{return false;};});assert('equals (==)',true,()=>{return (1==1);});assert('not equals (!=)',true,()=>{return (1!=1.2);});assert('greater than (>)',true,()=>{return (0>-1);});assert('less than (<)',true,()=>{return (-1.3<-1.1);});assert('greater than or equal to (<=)',true,()=>{return ((1<=2)&&(2<=2));});assert('less than or equal to (>=)',true,()=>{return ((2>=1)&&(2<=2));});assert('and (&&)',false,()=>{return ((1==2)&&("foo"=="foo"));});assert('or (||)',true,()=>{return ((1==2)||("foo"=="foo"));});console.log();console.log("Loops:");assert("for",6,()=>{let forArr=[1,2,3];let count=0;let $forArr_length=forArr.length;for(var i=0;i<$forArr_length;i++){count+=forArr[i];};return count;});assert("forNum",6,()=>{let count=0;for(var i=0;i<4;i++){count+=i;};return count;});assert("itterate",true,()=>{let forArr=[1,2,3];let key_count=0;let value_count=0;for(var[key,value]of forArr.entries()){key_count+=key;value_count+=value;};return ((key_count==3)&&(value_count==6));});assert("forKeys",true,()=>{let forKeysObj={foo:"bar",hello:"world"};let key_arr=[];let value_arr=[];for(let key in forKeysObj){let value=forKeysObj[key];key_arr.push(key);value_arr.push(value);};return ((((key_arr[0]=='foo')&&(key_arr[1]=='hello'))&&(value_arr[0]=='bar'))&&(value_arr[1]=='world'));});console.log();console.log("Classes:");assert('species',true,()=>{var GenericClass=function(param){let private={};this.name=param;private.priv_prop="hi";};let gen=new GenericClass("name");return ((gen.name=="name")&&(gen.priv_prop==null));});assert('class',true,()=>{var GenericClass=function(id,param){let private={};GenericClass.$map.set(id,this);this.name=id;this.param=param;private.priv_prop="hi";private.getter_prop=1;Object.defineProperty(this, "getter_prop", {get: ()=>{return private.getter_prop;}});};GenericClass.$map=new Map();GenericClass.get=function(id){return GenericClass.$map.get(id);};GenericClass.has=function(id){return GenericClass.$map.has(id);};GenericClass.forEach=function(cb){GenericClass.$map.forEach(cb);};let gen=new GenericClass('id','foo');gen.getter_prop=2;let getter_count=0;GenericClass.forEach((e)=>{getter_count+=e.getter_prop;});return (((((GenericClass.has('id')&&(GenericClass.get('id')==gen))&&(gen.param=='foo'))&&(gen.priv_prop==null))&&(gen.getter_prop==1))&&(getter_count==1));});console.log();console.log("Keywords:");assert('return',true,()=>{return true;});assert('try',true,()=>{try{return true;}catch{};});assert('catch',true,()=>{try{foo=doesnt_exist;return false;}catch{return true;};});assert('catch (e)',true,()=>{try{foo=doesnt_exist;return false;}catch(e){return (e!=null);};});assert('typeof',true,()=>{let num=1234;return typeof num=='number';});assert('instanceof',true,()=>{var Spec=function(){let private={};};let foo=new Spec();return foo instanceof Spec;});assert('break',1,()=>{let count=0;for(var i=0;i<3;i++){count+=(i+1);break;};return count;});assert('default',2,()=>{let foo=null;if(foo==null){foo=2;};return foo;});console.log();console.log("Errors:");assert('Error','message',()=>{try{throw Error("message")}catch(e){return e.message;};});assert('SyntaxError','message',()=>{try{throw SyntaxError("message")}catch(e){return e.message;};});assert('ReferenceError','message',()=>{try{throw ReferenceError("message")}catch(e){return e.message;};});assert('RangeError','message',()=>{try{throw RangeError("message")}catch(e){return e.message;};});console.log();console.log("Multithreading:");assert("Thread",true,()=>{});assert("Thread Pool",true,()=>{});console.log();console.log("OCS:");assert("Environment",false,()=>{});assert("Entity",false,()=>{});assert("Component",false,()=>{});assert("Query",false,()=>{});assert("System",false,()=>{});console.log();