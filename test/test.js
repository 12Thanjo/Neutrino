let $plugins=new Map();let $pending_plugins=new Map();let $get_plugin=function(name){if($plugins.has(name)){return $plugins.get(name);}else{var output=$pending_plugins.get(name)();$plugins.set(name,output);$pending_plugins.delete(name);return output;};};$pending_plugins.set('assert',()=>{let plugin={};let cmd=$get_plugin('cmd');let check="✓";let x='✘';plugin=function(title,value,condition){if(condition()==value){cmd.log(check+" "+title,cmd.color.green);}else{cmd.log(x+" "+title,cmd.color.red);};};plugin.metadata={"name":"assert","version":"0.1.0","description":"assert module","main":"index.nt","author":"12Thanjo","dependancies":["cmd"]};return plugin;});$pending_plugins.set('cmd',()=>{let plugin={};plugin.color={black:"\x1b[30m",red:"\x1b[31m",yellow:"\x1b[33m",green:"\x1b[32m",blue:"\x1b[34m",magenta:"\x1b[35m",cyan:"\x1b[36m",white:"\x1b[37m"};plugin.backgroundColor={black:"\x1b[40m",red:"\x1b[41m",green:"\x1b[42m",yellow:"\x1b[43m",blue:"\x1b[44m",magenta:"\x1b[45m",cyan:"\x1b[46m",white:"\x1b[47m"};plugin.style={reset:"\x1b[0m",bright:"\x1b[1m",dim:"\x1b[2m",underscore:"\x1b[4m",blink:"\x1b[5m",reverse:"\x1b[7m",hidden:"\x1b[8m"};plugin.log=function(string,color,backgroundColor){string=string||"";color=color||"";backgroundColor=backgroundColor||"";console.log(color+backgroundColor+string+plugin.color.white+plugin.backgroundColor.black+plugin.style.reset);};plugin.specialLog=function(data){if(typeof data=="string"==false){console.log(data);console.log();}else{if(isNaN(data)==false){console.log(plugin.color.orange+data+plugin.color.white+"\n");}else{console.log(plugin.color.green+"'"+data+"'"+plugin.color.white+"\n");};};};plugin.metadata={"name":"cmd","version":"0.1.0","description":"command line interaction","main":"index.nt","author":"12Thanjo","dependancies":[]};return plugin;});for(var[$key,$value]of $pending_plugins.entries()){$get_plugin($key);};let foo=-1;let integer=12;var negative_and_decimal=-12.4;globalThis.var3={string:"Hello World",array:[1.2,"3",["2D"],{foo:"bar"}],boolean:[true,false],foo:"bar"};var3.nulish=[null,undefined];let assert=$plugins.get('assert');console.log('Modules:');assert("import (tau .ntp)",true,()=>{return assert.metadata.name=="assert";});assert('macro (.ntm)',true,()=>{return true;});console.log();console.log("Variable Initialization:");assert('local',true,()=>{let local_var=true;return local_var;});assert('regional',true,()=>{var regional_var=true;return regional_var;});assert('global',true,()=>{globalThis.global_var=true;return global_var;});console.log();console.log("Misc: ");assert('function',true,()=>{var func=function(param){return param;};return func(true);});assert('arrow function (@()->{})',true,()=>{var a_func=(param)=>{return param;};return a_func(true);});assert('spread (~)',1,()=>{let arr=[1];let spread_arr=[...arr];return spread_arr[0];});assert('concat (| |)',true,()=>{let foo="c";let bar="d";let str="a"+(5)+"b"+(foo)+(bar);return str=="a5bcd";});console.log();console.log("Arithmetic Operators:");assert('addition (+)',10,()=>{return 10;});assert('subtraction (-)',2,()=>{return 2;});assert('multiplication (*)',24,()=>{return 24;});assert('division (/)',1.5,()=>{return 1.5;});assert('modulus (%)',2,()=>{return 2;});console.log();console.log("Assignment Operators:");var num=10;assert('addition (+=)',14,()=>{num+=4;return num;});assert('subtraction (-=)',12,()=>{num-=2;return num;});assert('multiplication (*=)',24,()=>{num*=2;return num;});assert('division (/=)',6,()=>{num/=4;return num;});assert('modulus (%=)',2,()=>{num%=4;return num;});console.log();console.log("Reverse Assignment Operators:");var num=10;var str="foo";assert('addition (=+)','barfoo',()=>{str="bar"+str;return str;});assert('subtraction (=-)',-8,()=>{num=2-num;return num;});assert('multiplication (=*)',-16,()=>{num=2*num;return num;});assert('division (=/)',2,()=>{num=-32/num;return num;});assert('modulus (=%)',1,()=>{num=5%num;return num;});console.log();console.log("Special Assignment Operators:");var num=5;assert("set greater (=>) smaller",5,()=>{if(3>num){num=3};return num;});assert("set greater (=>) larger",8,()=>{if(8>num){num=8};return num;});assert("set lesser (=<) smaller",3,()=>{if(3<num){num=3};return num;});assert("set lesser (=<) larger",3,()=>{if(8<num){num=8};return num;});console.log();console.log("Conditionals:");assert('if',true,()=>{if(true){return true;};});assert('else',true,()=>{if(false){return false;}else{return true;};});assert('else if',true,()=>{if(false){return false;}else if(true){return true;}else{return false;};});assert('equals (==)',true,()=>{return 1;});assert('not equals (!=)',true,()=>{return 1;});assert('greater than (>)',true,()=>{return 1;});assert('less than (<)',true,()=>{return 1;});assert('greater than or equal to (<=)',true,()=>{return 1;});assert('less than or equal to (>=)',true,()=>{return 1;});assert('and (&&)',false,()=>{return 0&&"foo"=="foo";});assert('or (||)',true,()=>{return 0||"foo"=="foo";});console.log();console.log("Loops:");assert("while",1,()=>{let count=0;while(true){count+=1;break;};return count;});assert("for",6,()=>{let forArr=[1,2,3];let count=0;let $arr_length=forArr.length;for(var i=0;i<$arr_length;i++){count+=forArr[i];};return count;});assert("forNum",6,()=>{let count=0;for(var i=0;i<4;i++){count+=i;};return count;});assert("itterate",true,()=>{let forArr=[1,2,3];let key_count=0;let value_count=0;for(var[key,value]of forArr.entries()){key_count+=key;value_count+=value;};return key_count==3&&value_count==6;});assert("forKeys",true,()=>{let forKeysObj={foo:"bar",hello:"world"};let key_arr=[];let value_arr=[];for(let key in forKeysObj){let value=forKeysObj[key];key_arr.push(key);value_arr.push(value);};return key_arr[0]=='foo'&&key_arr[1]=='hello'&&value_arr[0]=='bar'&&value_arr[1]=='world';});console.log();console.log("Classes:");assert('struct',true,()=>{let GenericStruct=function(param){let private={};this.name=param;private.priv_prop="hi";};let gen=new GenericStruct("name");return gen.name=="name"&&gen.priv_prop==null;});assert('class',true,()=>{let GenericClass=function(param){let private={};GenericClass.$map.set(GenericClass.$i,this);let id=GenericClass.$i;GenericClass.$i+=1;private.id=id;Object.defineProperty(this, "id", {get: ()=>{return private.id;}});this.param=param;private.priv_prop="hi";};GenericClass.$i=0;GenericClass.resetI=function(){GenericClass.$i=0;};GenericClass.$map=new Map();GenericClass.get=function(id){return GenericClass.$map.get(id);};GenericClass.has=function(id){return GenericClass.$map.has(id);};GenericClass.forEach=function(cb){GenericClass.$map.forEach(cb);};GenericClass.delete=function(cb){GenericClass.$map.delete(cb);};new GenericClass("foo");new GenericClass("bar");return GenericClass.has(0)&&GenericClass.get(0).param=="foo"&&GenericClass.get(1).param=="bar";});assert('species',true,()=>{let GenericSpecies=function(id,param){let private={};GenericSpecies.$map.set(id,this);this.name=id;this.param=param;private.priv_prop="hi";private.getter_prop=0;Object.defineProperty(this, "getter_prop", {get: ()=>{return private.getter_prop;}});private.getter_prop+=1;};GenericSpecies.$map=new Map();GenericSpecies.get=function(id){return GenericSpecies.$map.get(id);};GenericSpecies.has=function(id){return GenericSpecies.$map.has(id);};GenericSpecies.forEach=function(cb){GenericSpecies.$map.forEach(cb);};GenericSpecies.delete=function(cb){GenericSpecies.$map.delete(cb);};let gen=new GenericSpecies('id','foo');gen.getter_prop=2;let getter_count=0;GenericSpecies.forEach((target)=>{getter_count+=target.getter_prop;});return GenericSpecies.has('id')&&GenericSpecies.get('id')==gen&&gen.param=='foo'&&gen.priv_prop==null&&gen.getter_prop==1&&getter_count==1;});console.log();console.log("Keywords:");assert('return',true,()=>{return true;});assert('try',true,()=>{try{return true;}catch{};});assert('catch',true,()=>{try{foo=doesnt_exist;return false;}catch{return true;};});assert('catch (e)',true,()=>{try{foo=doesnt_exist;return false;}catch(e){return e!=null;};});assert('typeof',true,()=>{let num=1234;return typeof num=='number';});assert('instanceof',true,()=>{let Spec=function(){let private={};};let foo=new Spec();return foo instanceof Spec;});assert('swap',true,()=>{let a="foo";let b="bar";let $save=a;a=b;b=$save;return a=="bar"&&b=="foo";});assert('toggle',true,()=>{let foo=false;if(foo==false){foo=true;}else{foo=false;};return foo;});assert('break',1,()=>{let count=0;for(var i=0;i<3;i++){count+=i+1;break;};return count;});assert('default',2,()=>{let foo=null;if(foo==null){foo=2;};return foo;});assert('delete',null,()=>{let foo={bar:"asdf"};delete foo.bar;return foo.bar;});assert('is',true,()=>{let foo="foo";let search=['asdf','foo'];return (['asdf','foo'].includes('foo'))&&(search.includes('foo'));});assert('scope',true,()=>{let foo=true;let bar=false;{let foo=false;bar=true;};return foo&&bar;});console.log();console.log("Errors:");assert('Error','message',()=>{try{throw Error("message");}catch(e){return e.message;};});assert('SyntaxError','message',()=>{try{throw SyntaxError("message");}catch(e){return e.message;};});assert('ReferenceError','message',()=>{try{throw ReferenceError("message");}catch(e){return e.message;};});assert('RangeError','message',()=>{try{throw RangeError("message");}catch(e){return e.message;};});console.log();