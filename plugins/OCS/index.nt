// plugin: OCS
// description: ECS architecture thats feature rich and incredibly fast
// author: 12Thanjo

import multithread;

local OCS = function(){
	console.log('%c OCS Initialized | v0.1.0', "background-color: #00667f ; color: #cccccc ; font-size: 16px ; font-family: 'american typewriter';");

	// conditionals
	local all = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = true;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] == null){
							pass = false;
							break;
						};
					}else{
						if(entity[comp.id] == null){
							pass = false;
							break;
						};
					};
				};
				return pass;
			},
		};
	};

	local none = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = true;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] != null){
							pass = false;
							break;
						};
					}else{
						if(entity[comp.id] != null){
							pass = false;
							break;
						};
					};
				};
				return pass;
			},
		};
	};

	local some = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = false;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] != null){
							pass = true;
							break;
						};
					}else{
						if(entity[comp.id] != null){
							pass = true;
							break;
						};
					};
				};
				return pass;
			},
		};
	};

	species _Prop_(auto){
		this.auto = auto;
	};

	species _Component_(id, builder){
		this.id = id;
		this.builder = builder;
	};

	species _Environment_(id){
		private.id = id;
		private.entity_id = 0;
		private.entity_lookup = new Map();
		private.removed = new Set();

		private.entities = [];

		local env_priv = private;

		struct _Entity_(id, name){
			env_priv.entities[id] = this;

			access id = id;
			access name = name;
			if(name != null){
				env_priv.entity_lookup.set(private.name, this);
				this.destroy = function(){
					_Query_.forEach(@(query)->{
						query.remove(this);
					});
					env_priv.entity_lookup.delete(private.name);
					env_priv.removed.add(private.id);
					env_priv.entities[private.id] = null;
				};
			}else{
				this.destroy = function(){
					_Query_.forEach(@(query)->{
						query.remove(this);
					});
					env_priv.removed.add(private.id);
					env_priv.entities[private.id] = null;
				};
			};

			this.bindComponent = function(component, ~params){
				if(component instanceof _Component_ || component instanceof EnvComponent){
					component = component.id;
				};
				if(EnvComponent.has(component) == false){
					ReferenceError |"Environment (" env_priv.id  ") does not have component ("  component  ")"|;
				};

				local component_target = EnvComponent.get(component);


				if(component_target.builder instanceof _Prop_){
					params[0] default component_target.builder.auto;
					this[component] = params[0];
				}else{
					local builder_obj = Object.assign({}, component_target.builder);

					local i = 0;
					local create_component_props = function(builder, depth_arr){
						if(builder instanceof _Prop_){
							params[i] default builder.auto;

							local target = builder_obj;

							forNum(j, depth_arr.length - 1){
								target = target[depth_arr[j]];	
							};

							target[depth_arr[depth_arr.length - 1]] = params[i];

							i += 1;
						}else{
							forKeys builder(key, value){
								create_component_props(value, [~depth_arr, key]);
							};
						};
					};

					create_component_props(builder_obj, []);
					this[component] = builder_obj;
				};


				_Query_.forEach(@(query)->{
					query.audit(this);
				});

				return this;
			};
		};

		species EnvComponent(id, builder){
			access id = id;
			this.builder = builder;
		};

		species _Query_(id, conditionals){
			// private.id = id;
			this.entities = new Set();
			private.conditionals = conditionals;

			this.audit = function(entity){
				local pass = true;
				itterate private.conditionals(i, conditional){
					if(conditional.test(entity) == false){
						pass = false;
						break;
					};
				};

				if(pass){
					this.entities.add(entity.id);
				}else{
					this.entities.delete(entity.id);
				};
			};

			this.remove = function(entity){
				this.entities.delete(entity.id);
			};

			//Entity.forEach(@(entity)->{
			//	this.audit(entity);
			//});

			itterate env_priv.entities(i, entity){
				if(entity != null){
					this.audit(entity);
				};
			};

			this.forEach = function(event){
				itterate this.entities(i, id){
					event(env_priv.entities[id], i);
				};
			};

		};

		species _System_(id, query, event){
			private.query = _Query_.get(query);
			private.event = event;
			this.run = function(){
				private.query.forEach(@(entity, i)->{
					private.event(entity, i);
				});
			};

			this.setupCluster = function(threads){
				event_str = |"evnt=($data)=>{$data.data=("event.toString()")($data.data, $data.i);return $data;};"|;
				local evnt = null;
				eval(event_str);
				private.cluster = new multithread.cluster.forEach(threads, evnt);
			};

			this.runThreaded = function(components, callback){
				local array = [];
				private.query.forEach(@(entity)->{
					local obj = {};
					itterate components(i, component){
						obj[component] = entity[component];
					};
					array.push(obj);
				});

				private.cluster.run(array, @(i, data)->{
					private.query.forEach(@(entity)->{
						itterate components(j, component){
							entity[component] = data[component];
						};
					});
				}, callback);
			};

			this.runThreadedSafe = function(components, callback){
				local array = [];
				local entities = [];
				private.query.forEach(@(entity)->{
					local obj = {};
					itterate components(i, component){
						obj[component] = entity[component];
						entities.push(i);
					};
					array.push(obj);
					entities.push(entity);
				});

				private.cluster.run(array, @(i, data)->{
					itterate entities(j, entity){
						itterate components(k, component){
							entity[component] = data[component];
						};
					};	
				
				}, callback);
			};
		};

		// components
		this.bindComponent = function(component){
			return new EnvComponent(component.id, component.builder);
		};
		this.getComponent = function(id){
			return EnvComponent.get(id);
		};

		// entities
		this.createEntity = function(name){
			local new_entity = null;
			if(private.removed.size == 0){
				new_entity = new _Entity_(private.entity_id, name);
				private.entity_id += 1;
			}else{
				local entity_id = private.removed.values().next().value;
				private.removed.delete(entity_id);
				new_entity = new _Entity_(entity_id, name);
			};

			return new_entity;
		};
		this.getEntity = function(name){
			return private.entity_lookup.get(name);
		};

		// queries
		this.createQuery = function(id, ~conditionals){
			new _Query_(id, conditionals);
		};
		//this.getQuery = function(id){
		//	return _Query_.get(id);
		//};
		this.deleteQuery = function(id){
			_Query_.delete(id);
		};

		// systems
		this.createSystem = function(id, query, event){
			return new _System_(id, query, event);
		};
		this.getSystem = function(id){
			return _System_.get(id);
		};
		this.deleteSystem = function(id){
			_System_.delete(id);
		};
	};


	species EventLoop(name){
		access name = name;

		private.i = 0;
		private.queue = [];

		this.add = function(event){
			private.queue.push(event);
		};

		this.next = function(){
			private.i += 1;
			try{
				private.queue[private.i](this.next);
			};
		};

		this.start = function(){
			private.i = -1;
			this.next();
		};

	};
	


	return {
		_Environment_: _Environment_,
		_Component_: _Component_,
		_Prop_: _Prop_,
		all: all,
		none: none,
		some: some,
		EventLoop: EventLoop,
	};
};



plugin = new OCS();