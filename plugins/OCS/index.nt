// plugin: OCS
// description: ECS architecture thats feature rich and incredibly fast
// author: 12Thanjo

local OCS = function(){
	console.log('%c OCS Initialized | v0.1.0', "background-color: #00667f ; color: #cccccc ; font-size: 16px ; font-family: 'american typewriter';");

	// conditionals
	local all = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = true;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] == null){
							pass = false;
							break;
						};
					}else{
						if(comp.test(entity) == false){
							pass = false;
							break;
						};
					};
				};
				return pass;
			},
		};
	};

	local none = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = true;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] != null){
							pass = false;
							break;
						};
					}else{
						if(comp.test(entity) == false){
							pass = false;
							break;
						};
					};
				};
				return pass;
			},
		};
	};

	local some = function(~conditionals){
		return { 
			test: @(entity)->{
				local pass = false;
				itterate conditionals(i, comp){
					if(comp typeof "string"){
						if(entity[comp] != null){
							pass = true;
							break;
						};
					}else{
						if(comp.test(entity)){
							pass = true;
							break;
						};
					};
				};
				return pass;
			},
		};
	};


	species Prop(auto){
		this.auto = auto;
	};

	class Component_(id, builder){
		this.id = id;
		this.builder = builder;
	};

	class Environment_(id, MAX){
		private.id = id;
		private.entity_id = 0;
		private.entity_lookup = new Map();
		private.removed = new Set();

		private.entities = [];

		local env_priv = private;

		class Entity(id, name){
			env_priv.entities[id] = this;

			this.id = id;
			this.name = name;
			if(name != null){
				env_priv.entity_lookup.set(private.name, this);
				local destroy = this.destroy;
				this.destroy = function(){
					env_priv.entity_lookup.delete(private.name);
					env_priv.removed.add(private.id);
					Query_.forEach(@(query)->{
						query.audit(this);
					});
					destroy();
				};
			}else{
				local destroy = this.destroy;
				this.destroy = function(){
					env_priv.removed.add(private.id);
					Query_.forEach(@(query)->{
						query.audit(this);
					});
					destroy();
				};
			};

			this.addComponent_ = function(component, ~params){
				if(EnvComponent.has(component) == false){
					ReferenceError "Environment_ (" + env_priv + ") does not have component (" + component + ")";
				};

				local component_target = EnvComponent.get(component);


				if(component_target.builder instanceof Prop){
					params[0] default component_target.builder.auto;
					this[component] = params[0];
				}else{
					local builder_obj = Object.assign({}, component_target.builder);

					local i = 0;
					local create_component_props = function(builder, depth_arr){
						if(builder instanceof Prop){
							params[i] default builder.auto;

							local target = builder_obj;

							forNum(j, depth_arr.length - 1){
								target = target[depth_arr[j]];	
							};

							target[depth_arr[depth_arr.length - 1]] = params[i];

							i += 1;
						}else{
							forKeys builder(key, value){
								create_component_props(value, [~depth_arr, key]);
							};
						};
					};

					create_component_props(builder_obj, []);
					this[component] = builder_obj;
				};


				Query_.forEach(@(query)->{
					query.audit(this);
				});

				return this;
			};
		};

		class EnvComponent(id, builder){
			// private.id = id;
			this.builder = builder;
		};

		class Query_(id, conditionals){
			// private.id = id;
			this.entities = new Set();
			private.conditionals = conditionals;

			this.audit = function(entity){
				local pass = true;
				itterate private.conditionals(i, conditional){
					if(conditional.test(entity) == false){
						pass = false;
						break;
					};
				};

				if(pass){
					this.entities.add(entity.id);
				}else{
					this.entities.delete(entity.id);
				};
			};

			Entity.forEach(@(entity)->{
				this.audit(entity);
			});

			this.forEach = function(event){
				itterate this.entities(i, id){
					local entity = env_priv.entities[id];
					event(entity);
				};
			};
		};

		class System_(id, query, event){
			private.query = Query_.get(query);
			private.event = event;
			this.run = function(){
				private.query.forEach(private.event);
			};
		};

		// components
		this.bindComponent = function(component){
			return new EnvComponent(component.id, component.builder);
		};
		this.getComponent = function(id){
			return EnvComponent.get(id);
		};

		// entities
		this.createEntity = function(name){
			local new_entity = null;
			if(private.removed.size == 0){
				new_entity = new Entity(private.entity_id, name);
				private.entity_id += 1;
			}else{
				local entity_id = private.removed.values().next().value;
				private.removed.delete(entity_id);
				new_entity = new Entity(entity_id, name);
			};

			return new_entity;
		};
		this.getEntity = function(name){
			return private.entity_lookup.get(name);
		};

		// queries
		this.getQuery_ = function(id){
			return Query_.get(id);
		};
		this.createQuery = function(id, ~conditionals){
			new Query_(id, conditionals);
		};

		// systems
		this.createSystem = function(id, query, event){
			return new System_(id, query, event);
		};
		this.getSystem = function(id){
			return System_.get(id);
		};
	};


	return {
		Environment_: Environment_,
		Component_: Component_,
		Prop: Prop,
		all: all,
		none: none,
		some: some,
		getEnvironment: @(id)->{
			return Environment_.get(id);
		},
	};
};



plugin = new OCS();