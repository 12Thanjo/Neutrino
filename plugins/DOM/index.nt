// plugin: DOM
// description: DOM manipulation library
// author: 12Thanjo


local to_camel_case = function(prop){
	local output = "";
	for(i, prop){
		if(prop[i] == "-"){
			i += 1;
			output += prop[i].toLocaleUpperCase();
		}else{
			output += prop[i];
		};
	};

	return output;
};


struct DOMElement(elem){
	this.element = elem;

	this.on = function(event, callback){
		this.element.addEventListener(event, callback);
		return this;
	};

	this.isReady = function(){
		return this.element.readyState != null && this.element.readyState != "loading";
	};

	this.ready = function(callback){
		if(this.isReady()){
			callback();
		}else{
			this.on('DOMContentLoaded', callback);
		};
	};

	// next
	this.getNext = function(){
		return new DOMElement(this.element.nextElementSibling);
	};

	this.next = function(){
		this.element = this.element.nextElementSibling;
		return this;
	};

	// previous
	this.getPrevious = function(){
		return new DOMElement(this.element.previousElementSibling);
	};

	this.previous = function(){
		this.element = this.element.previousElementSibling;
		return this;
	};


	// classes
	this.addClass = function(className){
		this.element.classList.add(className);
		return this;
	};

	this.removeClass = function(className){
		this.element.classList.remove(className);
		return this;
	};


	// children
	this.child = function(){
		this.element = this.element.children[0];
		return this;
	};
	this.getChild = function(){
		return new DOMElement(this.element.children[0]);
	};
	//this.getChildren = function(){
	//	return new DOMCollection(this.element.children);
	//};



	this.getStyle = function(prop){
		return this.element.style[prop];
	};
	this.style = function(prop, val){
		prop = to_camel_case(prop);
		if(val typeof "number"){
			this.element.style[prop] = val + "px";
		}else{
			this.element.style[prop] = val;
		};
		return this;
	};
	this.css = function(props){
		forKeys props(key, value){
			if(value typeof "number"){
				this.element.style[key] = value + "px";
			}else{
				this.element.style[key] = value;
			};
		};
		return this;
	};


	this.select = function(query){
		return new DOMCollection([~this.element.querySelectorAll(":scope > " + query)]);
	};
	this.selectAll = function(query){
		return new DOMCollection([~this.element.querySelectorAll(query)]);
	};

	Object.defineProperty(this, 'innerHTML', {
		get: function(){
			return this.element.innerHTML;
		},
		set: function(val){
			this.element.innerHTML = val;
			return val;
		},
	});

	Object.defineProperty(this, 'value', {
		get: function(){
			return this.element.value;
		},
		set: function(val){
			this.element.value = val;
			return val;
		},
	});


	Object.defineProperty(this, 'width', {
		get: function(){
			return this.element.clientWidth;
		},
		set: function(val){
			this.element.style.width = val + "px";
		},
	});

	Object.defineProperty(this, 'height', {
		get: function(){
			return this.element.clientHeight;
		},
		set: function(val){
			this.element.style.height = val + "px";
		},
	});

	Object.defineProperty(this, 'x', {
		get: function(){
			return this.element.offsetLeft;
		},
		set: function(val){
			this.element.style.position = 'absolute';
			this.element.style.left = val + "px";
		},
	});

	Object.defineProperty(this, 'y', {
		get: function(){
			return this.element.offsetTop;
		},
		set: function(val){
			this.element.style.position = 'absolute';
			this.element.style.top = val + "px";
		},
	});

	Object.defineProperty(this, 'id', {
		get: function(){
			return this.element.id;
		},
		set: function(val){
			this.element.id = val;
		},
	});

	Object.defineProperty(this, 'hidden', {
		get: function(){
			return this.element.hidden;
		},
		set: function(val){
			this.element.hidden = val;
		},
	});

	Object.defineProperty(this, 'display', {
		get: function(){
			return this.element.display;
		},
		set: function(val){
			this.element.display = val;
		},
	});


	this.focus = function(){
		this.element.focus();
	};



	this.appendChild = function(child){
		this.element.appendChild(child);
	};

	this.destroy = function(){
		this.element.remove();
		delete this.element;
	};

};


struct DOMCollection(arr){
	itterate arr(i, elem){
		arr[i] = new DOMElement(elem);
	};


	this.array = arr;

	this.on = function(event, callback){
		// local foo = ;
		itterate this.array(i, elem){
			elem.on(event, callback);
		};
		return this;
	};

	this.ready = function(callback){
		local is_ready = this.array.some(@(elem)->{
    		return elem.isReady();
		});

		if(is_ready){
			callback();
		}else{
			this.on('DOMContentLoaded', callback);
		};
	};


	this.addElement = function(domElement){
		if(domElement instanceof DOMElement){
			this.array.push(domElement);
			return this;
		}else{
			console.error("DOMCollection.addElement must take a domElement");
		};
	};


	this.removeElement = function(domElement){
		itterate this.array(i, elem){
			if(elem == domElement){
				this.array.splice(i, 1);
				break;
			};
		};
		return this;
	};


	this.next = function(){
		itterate this.array(i, elem){
			elem.next();
		};
	};
	this.prev = function(){
		itterate this.array(i, elem){
			elem.prev();
		};
	};

	this.addClass = function(className){
		itterate this.array(i, elem){
			elem.addClass(className);
		};
		return this;
	};

	this.removeClass = function(className){
		itterate this.array(i, elem){
			elem.removeClass(className);
		};
		return this;
	};

	this.getStyle = function(prop){
		local output = [];
		itterate this.array(i, elem){
			output.push(elem.getStyle(prop));
		};
		return output;
	};
	this.style = function(prop, val){
		itterate this.array(i, elem){
			elem.style(prop, val);
		};
		return this;
	};
	this.css = function(props){
		itterate this.array(i, elem){
			elem.css(props);
		};
		return this;
	};

	this.select = function(query){
		local output = [];
		itterate this.array(i, elem){
			local it_target = elem.select(query).array;
			itterate it_target(key, value){
				output.push(value.element);
			};
		};
		return new DOMCollection(output);
	};

	this.selectAll = function(query){
		local output = [];
		itterate this.array(i, elem){
			local it_target = elem.selectAll(query).array;
			itterate it_target(key, value){
				output.push(value.element);
			};
		};
		return new DOMCollection(output);
	};

	Object.defineProperty(this, 'innerHTML', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.innerHTML);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.innerHTML = val;
			};	
		},
	});

	Object.defineProperty(this, 'value', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.value);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.value = val;
			};	
		},
	});

	Object.defineProperty(this, 'width', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.width);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.width = val;
			};
		},
	});
	Object.defineProperty(this, 'height', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.height);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.height = val;
			};
		},
	});

	Object.defineProperty(this, 'x', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.x);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.x = val;
			};
		},
	});
	Object.defineProperty(this, 'y', {
		get: function(){
			local output = [];
			itterate this.array(i, elem){
				output.push(elem.y);
			};
			return output;
		},
		set: function(val){
			itterate this.array(i, elem){
				elem.y = val;
			};
		},
	});

	this.destroy = function(){
		itterate this.array(i, elem){
			elem.destroy();
		};
	};
};


//////////////////////////////////////////////////////////////////////////////////////////////////



plugin = function(query){
	if(query typeof 'string' || query instanceof String){
		if(query[0] == "$"){
			query = |'[name="'query.substring(1, query.length)'"]'|;
		};
		// string selector
		local result = [~document.querySelectorAll(query)];
		if(result.length == 1){
			return new DOMElement(result[0]);
		}else if(result.length > 1){
			return new DOMCollection([~result]);
		};
	}else{
		return new DOMCollection([query]);
	};
};

plugin.get = function(query){
	if(query typeof 'string' || query instanceof String){
		// string selector
		local selector = document.querySelectorAll(query);
		if(selector.length > 1){
			console.error("DOM.select only takes 1 element");
		}else{
			return new DOMElement(selector[0]);
		};
	}else{
		return new DOMElement(query);
	};
};


Object.defineProperty(plugin, 'w', {
	get: function(){
		return window.innerWidth;
	},
});
Object.defineProperty(plugin, 'h', {
	get: function(){
		return window.innerHeight;
	},
});

plugin.vw = function(val){
	return val / 100 * window.innerWidth;
};
plugin.vh = function(val){
	return val / 100 * window.innerHeight;
};

plugin.triggerOnResize = function(){
	window.dispatchEvent(new Event('resize'));
};
plugin.onResize = function(event){
	window.onresize = event;
	plugin.triggerOnResize();	
};


plugin.createElement = function(type, appendTarget){
	local elem = document.createElement(type);
	appendTarget.appendChild(elem);
	return new DOMElement(elem);
};

plugin.deleteElement = function(element){
	element.destroy();
};


macro "colors";