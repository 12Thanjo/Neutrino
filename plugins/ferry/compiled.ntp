module.exports=function($pending_plugins,$get_plugin){$pending_plugins.set('ferry',()=>{let plugin={metadata:{"name":"ferry","version":"0.1.0","description":"HTTP request handler built on top of Waterfall","main":"index.nt","author":"12Thanjo","dependancies":["waterfall","cmd","crypto"]}};let waterfall=$get_plugin('waterfall');let cmd=$get_plugin('cmd');let crypto=$get_plugin('crypto');let log_builder=function(type,message){return {type:type,message:message,timestamp:new Date().toUTCString()};};plugin.log={info:function(message){let log=log_builder("info",message);;let mode=plugin.log.mode.info;if(mode=="full"){cmd.log(JSON.stringify(log),cmd.color.cyan);}else if(mode=="verbose"){cmd.log(message,cmd.color.cyan);}else if(mode!="silent"){throw new Error(('`info log is set to an invalid mode.\nGot('+(mode)+'})\nSupported modes are: "verbose", "debug", "silent"'));};let str=JSON.stringify(log);;},warning:function(message){let log=log_builder("warning",message);;let mode=plugin.log.mode.warning;if(mode=="full"){cmd.log(JSON.stringify(log),cmd.color.yellow);}else if(mode=="verbose"){cmd.log(message,cmd.color.yellow);}else if(mode!="silent"){throw new Error(('`warning log is set to an invalid mode.\nGot('+(mode)+'})\nSupported modes are: "verbose", "debug", "silent"'));};let str=JSON.stringify(log);;},error:function(message){let log=log_builder("error",message);;let mode=plugin.log.mode.error;if(mode=="full"){cmd.log(JSON.stringify(log),cmd.color.red);}else if(mode=="verbose"){cmd.log(message,cmd.color.red);}else if(mode!="silent"){throw new Error(('`error log is set to an invalid mode.\nGot('+(mode)+'})\nSupported modes are: "verbose", "debug", "silent"'));};let str=JSON.stringify(log);;},mode:{info:"verbose",warning:"verbose",error:"verbose"}};let create_error_string=function(code,status,message,req){return '<!DOCTYPE html>'+'<html>'+'<head>'+'<meta charset="utf-8">'+'<meta name="viewport" content="width=device-width, initial-scale=1">'+'<title>ERROR '+(code)+'</title>'+'</head>'+'<body>'+'<h1><b>'+(code)+'</b> '+(status)+'</h1>'+'<p>'+(message)+': '+(req.method)+' '+(req.path)+'</p>'+'</body>'+'</html>';};plugin.error={'400':function(req,res){res.send(create_error_string(400,"Bad Request","Bad Request",req));res.statusCode=400;plugin.log.warning("400 - Bad Request: "+(req.method)+" "+(req.path));},'401':function(req,res){res.send(create_error_string(401,"Unauthorized","Unauthorized Access",req));res.statusCode=401;plugin.log.warning("401 - Unauthorized Access Attempt: "+(req.method)+" "+(req.path));},'403':function(req,res){res.send(create_error_string(403,"Forbidden","Forbidden Access",req));res.statusCode=403;plugin.log.warning("403 - Forbidden Access Attempt: "+(req.method)+" "+(req.path));},'404':function(req,res){res.send(create_error_string(404,"Not Found","Cannot get path",req));res.statusCode=404;plugin.log.info("404 - Cannot get path: "+(req.method)+" "+(req.path));},'405':function(req,res){res.send(create_error_string(405,"Not Acceptable","Not Acceptable",req));res.statusCode=405;plugin.log.info("405 - Not Acceptable: "+(req.method)+" "+(req.path));},'418':function(req,res){res.send(create_error_string(418,"I am a teapot","I am a teapot",req));res.statusCode=418;plugin.log.info("418 - I am a teapot: "+(req.method)+" "+(req.path));},'500':function(req,res,message){res.send(create_error_string(500,"Internal Server Error","Internal Server Error",req));res.statusCode=500;plugin.log.error("500 - Internal Server Error: "+(req.method)+" "+(req.path)+" | "+(message));},'501':function(req,res){res.send(create_error_string(501,"Not Implimented","Method Not Implimented",req));res.statusCode=501;plugin.log.info("501 - Method Not Implimented: "+(req.method)+" "+(req.path));},'502':function(req,res){res.send(create_error_string(502,"Bad Gateway","Gateway returned invalid response",req));res.statusCode=502;plugin.log.info("502 - Gateway returned invalid response: "+(req.method)+" "+(req.path));}};let Session=function(uuid){let $this=this;let private={};this.$op={};Session.$map.set(uuid,this);private.uuid=uuid;Object.defineProperty(this, "uuid", {get: ()=>{return private.uuid;}});$this.data={};$this.generate_csrf=function(){private.csrf=crypto.randomString(64);return private.csrf;};$this.generate_csrf();$this.check_csrf=function(csrf){return crypto.equal(csrf,private.csrf);};$this.delete=function(){Session.delete($this.uuid);};};Session.$map=new Map();Session.get=function(id){return Session.$map.get(id);};Session.has=function(id){return Session.$map.has(id);};Session.forEach=function(cb){Session.$map.forEach(cb);};Session.delete=function(cb){Session.$map.delete(cb);};let create_session=function(){return new Session(crypto.uuid());};let dir_map={};setup_dir=function(method,path,event){if(path.length!=1&&path[path.length-1]=="/"){path=path.slice(0,path.length-1);cmd.warn("Removed \"/\" from end of path ( "+(path)+" )");};if(dir_map[method]==null){dir_map[method]=new Map();};dir_map[method].set(path,event);};plugin.get=function(path,callback){setup_dir("GET",path,callback);};plugin.post=function(path,callback){setup_dir("POST",path,callback);};plugin.delete=function(path,callback){setup_dir("DELETE",path,callback);};plugin.put=function(path,callback){setup_dir("PUT",path,callback);};plugin.options=function(path,callback){setup_dir("OPTIONS",path,callback);};plugin.patch=function(path,callback){setup_dir("PATCH",path,callback);};plugin.on=function(method,path,callback){setup_dir(method,path,callback);};let middlewares=new Map();;plugin.middleware=function(path,event){middlewares.set(path,event);};let afterwares=[];plugin.afterware=function(event){afterwares.push(event);};let error_check=function(req,res,event){try{event(req,res);}catch(e){plugin.error['500'](req,res,(e.message)+" | "+(e.stack));};};plugin.start=function(port,config){if(port==null){port=8000;};if(config==null){config={};};if(config.cookieSecret==null){config.cookieSecret="";};if(config.useSessions==null){config.useSessions=false;};if(config.rejectInvalidCookies==null){config.rejectInvalidCookies=false;};if(config.rejectInvalidSessions==null){config.rejectInvalidSessions=false;};if(config.deleteRejectedSessions==null){config.deleteRejectedSessions=false;};waterfall(port,(req,res)=>{if(config.cookieSecret!=""){for(let key in req.cookies){let value=req.cookies[key];let verified=crypto.verify(value,config.cookieSecret);;if(verified){let unsigned=crypto.unsign(value);;req.cookies[key]=unsigned;res.cookies.set(key,unsigned);}else{if(config.rejectInvalidCookies){req.reject=true;}else{res.cookies.remove(key);delete req.cookies[key];};};};};delete res.cookies.remove;let session=null;if(config.useSessions){if(req.cookies["|--SESSION--|"]!=null){if(Session.has(req.cookies["|--SESSION--|"])){session=Session.get(req.cookies["|--SESSION--|"]);if(session.check_csrf(req.cookies["|--CSRF--|"])){req.session=session.data;}else{plugin.log.warning("Someone with an incorrect CSRF attempted to connect (UUID: "+(req.cookies['|--SESSION--|'])+", CSRF: "+(req.cookies['|--SESSION--|'])+")");req.reject=config.rejectInvalidSessions;};}else{plugin.log.warning("Someone with an incorrect session UUID attempted to connect (UUID: "+(req.cookies['|--SESSION--|'])+")");};};if(session==null&&req.reject==false){session=create_session();plugin.log.info("Created a new session | UUID: "+session.uuid);req.session=session.data;};delete req.cookies['|--SESSION--|'];delete req.cookies['|--CSRF--|'];};let split_path=req.path.split("/");;let path_str="";let $continue=req.reject==false;for(var[i,value]of split_path.entries()){if($continue){if(path_str!="/"){path_str+="/"+value;}else{path_str+=value;};if(middlewares.has(path_str)){error_check(req,res,(req,res)=>{$continue=middlewares.get(path_str)(req,res)!=false;if($continue==false){plugin.error['403'](req,res);}else{$continue=req.reject==false;};});};}else{break;};};if($continue){let method=req.method;if(req.path.length!=1&&req.path[req.path.length-1]=="/"){req.path=req.path.slice(0,req.path.length-1);};if(dir_map[method]&&dir_map[method].has(req.path)){error_check(req,res,dir_map[method].get(req.path));}else{plugin.error['404'](req,res);};for(var[i,event]of afterwares.entries()){event(req,res);};if(config.useSessions){res.cookies.set("|--SESSION--|",session.uuid);res.cookies.set("|--CSRF--|",session.generate_csrf());};if(config.cookieSecret!=""){let cookie_list=res.cookies.print();;for(let key in cookie_list){let value=cookie_list[key];res.cookies.set(key,crypto.sign(value,config.cookieSecret));};};};if(req.reject){plugin.log.warning("Rejected a "+(req.method)+" request from "+(req.ip));if(config.rejectInvalidSessions){session.delete();};};});};return plugin;})};