module.exports=function($pending_plugins,$get_plugin){$pending_plugins.set('math',()=>{let plugin={metadata:{"name":"math","version":"0.1.0","description":"advanced math types and functions","main":"index.nt","author":"12Thanjo","dependancies":[]}};
	plugin.TAU=Math.PI*2; //1:7 | constants.ntm
	let Vector2=function(x,y){
		let $this=this;let private={};this.$op={};
		private.x=x; //2:13 | Vector2.ntm
		Object.defineProperty(this, "x", {get: ()=>{return private.x;}}); //2:11 | Vector2.ntm
		private.y=y; //3:13 | Vector2.ntm
		Object.defineProperty(this, "y", {get: ()=>{return private.y;}}); //3:11 | Vector2.ntm
		$this.add=function(vector){ //5:23 | Vector2.ntm
			private.x+=vector.x; //6:16 | Vector2.ntm
			private.y+=vector.y; //7:16 | Vector2.ntm
		}; //5:9 | Vector2.ntm
		$this.sub=function(vector){ //10:23 | Vector2.ntm
			private.x-=vector.x; //11:16 | Vector2.ntm
			private.y-=vector.y; //12:16 | Vector2.ntm
		}; //10:9 | Vector2.ntm
		$this.mul=function(scalar){ //15:23 | Vector2.ntm
			private.x*=scalar; //16:16 | Vector2.ntm
			private.y*=scalar; //17:16 | Vector2.ntm
		}; //15:9 | Vector2.ntm
		$this.div=function(scalar){ //20:23 | Vector2.ntm
			private.x/=scalar; //21:16 | Vector2.ntm
			private.y/=scalar; //22:16 | Vector2.ntm
		}; //20:9 | Vector2.ntm
		$this.equal=function(vector){ //25:25 | Vector2.ntm
			return vector instanceof Vector2&&private.x==vector.x&&private.y==vector.y; //26:15 | Vector2.ntm
		}; //25:9 | Vector2.ntm
		$this.magnitude=function(){ //29:29 | Vector2.ntm
			return Math.sqrt(private.x*private.x,private.y*private.y); //30:15 | Vector2.ntm
		}; //29:9 | Vector2.ntm
		$this.distance=function(vector){ //33:28 | Vector2.ntm
			let dx=private.x-vector.x; //34:17 | Vector2.ntm
			let dy=private.y-vector.y; //35:17 | Vector2.ntm
			return Math.sqrt(dx*dx,dy*dy); //36:15 | Vector2.ntm
		}; //33:9 | Vector2.ntm
	}; //1:7 | Vector2.ntm
	plugin.Vector2=Vector2; //39:7 | Vector2.ntm
	Vector2.normalize=function(vector){ //41:28 | Vector2.ntm
		let length=vector.magnitude(); //42:17 | Vector2.ntm
		return new Vector2(vector.x/length,vector.y/length); //43:11 | Vector2.ntm
	}; //41:8 | Vector2.ntm
	Vector2.dot=function(vector1,vector2){ //46:22 | Vector2.ntm
		return vector1.x*vector2.x+vector1.y*vector2.y; //47:11 | Vector2.ntm
	}; //46:8 | Vector2.ntm
	Vector2.cross=function(vector1,vector2){ //50:24 | Vector2.ntm
		return vector1.x*vector2.y-vector1.y*vector2.x; //51:11 | Vector2.ntm
	}; //50:8 | Vector2.ntm
	let Matrix=function(rows,collumns){
		let $this=this;let private={};this.$op={};
		private.rows=rows; //3:16 | Matrix.ntm
		Object.defineProperty(this, "rows", {get: ()=>{return private.rows;}}); //3:11 | Matrix.ntm
		private.collumns=collumns; //4:20 | Matrix.ntm
		Object.defineProperty(this, "collumns", {get: ()=>{return private.collumns;}}); //4:11 | Matrix.ntm
		private.array=[]; //6:12 | Matrix.ntm
		for(var i=0;i<rows;i++){
			let arr=[]; //9:18 | Matrix.ntm
			for(var j=0;j<collumns;j++){
				arr.push(0); //11:21 | Matrix.ntm
			}; //10:15 | Matrix.ntm
			private.array.push(arr); //13:27 | Matrix.ntm
		}; //8:11 | Matrix.ntm
		$this.getValue=function(x,y){ //19:28 | Matrix.ntm
			return private.array[x][y]; //20:15 | Matrix.ntm
		}; //19:9 | Matrix.ntm
		$this.setValue=function(x,y,value){ //23:28 | Matrix.ntm
			private.array[x][y]=value; //24:16 | Matrix.ntm
			return value; //25:15 | Matrix.ntm
		}; //23:9 | Matrix.ntm
		$this.setArray=function(array){ //28:28 | Matrix.ntm
			if(array.length!=private.rows){
				try{
					throw new Error("Recieved array for matrix of non-same or invalid dimentions");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //30:18 | Matrix.ntm
			}; //29:11 | Matrix.ntm
			for(var[i,collumn]of private.array.entries()){
				if(collumn.length!=private.collumns){
					try{
						throw new Error("Recieved array for matrix of non-same or invalid dimentions");
					}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //34:22 | Matrix.ntm
				}; //33:15 | Matrix.ntm
			}; //32:16 | Matrix.ntm
			private.array=array; //38:16 | Matrix.ntm
		}; //28:9 | Matrix.ntm
		$this.print=function(){ //43:25 | Matrix.ntm
			return [...private.array]; //44:15 | Matrix.ntm
		}; //43:9 | Matrix.ntm
		$this.forEach=function(func){ //48:27 | Matrix.ntm
			for(var i=0;i<private.rows;i++){
				for(var j=0;j<private.collumns;j++){
					private.array[i][j]=func(private.array[i][j]); //51:24 | Matrix.ntm
				}; //50:19 | Matrix.ntm
			}; //49:15 | Matrix.ntm
		}; //48:9 | Matrix.ntm
		this.$op["+ <Matrix>"]=function(matrix){
			if(private.rows!=matrix.rows||private.collumns!=matrix.collumns){
				try{
					throw new SyntaxError("Matrix Addition must be of the same dimentions");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //60:24 | Matrix.ntm
			}; //59:11 | Matrix.ntm
			let output=new Matrix(private.rows,private.collumns); //63:21 | Matrix.ntm
			var $0=private.array.length;
			for(var i=0;i<$0;i++){
				var $1=private.array[i].length;
				for(var j=0;j<$1;j++){
					output.setValue(i,j,private.array[i][j]+matrix.getValue(i,j)); //67:32 | Matrix.ntm
				}; //66:16 | Matrix.ntm
			}; //65:12 | Matrix.ntm
			return output; //71:15 | Matrix.ntm
		}; //58:14 | Matrix.ntm
		this.$op["+= <Matrix>"]=function(matrix){
			if(private.rows!=matrix.rows||private.collumns!=matrix.collumns){
				try{
					throw new SyntaxError("Matrix Addition must be of the same dimentions");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //76:24 | Matrix.ntm
			}; //75:11 | Matrix.ntm
			var $2=private.array.length;
			for(var i=0;i<$2;i++){
				var $3=private.array[i].length;
				for(var j=0;j<$3;j++){
					private.array[i][j]+=matrix.getValue(i,j); //81:24 | Matrix.ntm
				}; //80:16 | Matrix.ntm
			}; //79:12 | Matrix.ntm
		}; //74:14 | Matrix.ntm
		this.$op["- <Matrix>"]=function(matrix){
			if(private.rows!=matrix.rows||private.collumns!=matrix.collumns){
				try{
					throw new SyntaxError("Matrix Addition must be of the same dimentions");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //89:24 | Matrix.ntm
			}; //88:11 | Matrix.ntm
			let output=new Matrix(private.rows,private.collumns); //92:21 | Matrix.ntm
			var $4=private.array.length;
			for(var i=0;i<$4;i++){
				var $5=private.array[i].length;
				for(var j=0;j<$5;j++){
					output.setValue(i,j,private.array[i][j]-matrix.getValue(i,j)); //96:32 | Matrix.ntm
				}; //95:16 | Matrix.ntm
			}; //94:12 | Matrix.ntm
			return output; //100:15 | Matrix.ntm
		}; //87:14 | Matrix.ntm
		this.$op["-= <Matrix>"]=function(matrix){
			if(private.rows!=matrix.rows||private.collumns!=matrix.collumns){
				try{
					throw new SyntaxError("Matrix Addition must be of the same dimentions");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //105:24 | Matrix.ntm
			}; //104:11 | Matrix.ntm
			var $6=private.array.length;
			for(var i=0;i<$6;i++){
				var $7=private.array[i].length;
				for(var j=0;j<$7;j++){
					private.array[i][j]-=matrix.getValue(i,j); //110:24 | Matrix.ntm
				}; //109:16 | Matrix.ntm
			}; //108:12 | Matrix.ntm
		}; //103:14 | Matrix.ntm
		this.$op["* <Number>"]=function(coefficient){
			let output=new Matrix(private.rows,private.collumns); //117:21 | Matrix.ntm
			var $8=private.array.length;
			for(var i=0;i<$8;i++){
				var $9=private.array[i].length;
				for(var j=0;j<$9;j++){
					output.setValue(i,j,private.array[i][j]*coefficient); //120:32 | Matrix.ntm
				}; //119:16 | Matrix.ntm
			}; //118:12 | Matrix.ntm
		}; //116:14 | Matrix.ntm
		this.$op["*= <Number>"]=function(coefficient){
			var $10=private.array.length;
			for(var i=0;i<$10;i++){
				var $11=private.array[i].length;
				for(var j=0;j<$11;j++){
					private.array[i][j]*=coefficient; //128:24 | Matrix.ntm
				}; //127:16 | Matrix.ntm
			}; //126:12 | Matrix.ntm
		}; //125:14 | Matrix.ntm
		this.$op["* <Matrix>"]=function(matrix){
			if(private.width!=matrix.height){
				try{
					throw new SyntaxError("Matrix A's width must be the same as Matrix B's height (where A *= B)");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //136:24 | Matrix.ntm
			}; //135:11 | Matrix.ntm
			let output=new Matrix(private.rows,matrix.collumns); //139:21 | Matrix.ntm
			for(var a_row=0;a_row<private.rows;a_row++){
				for(var b_collumn=0;b_collumn<matrix.collumns;b_collumn++){
					let num=0; //143:26 | Matrix.ntm
					for(var i=0;i<private.collumns;i++){
						num+=private.array[a_row][i]*matrix.getValue(i,b_collumn); //145:24 | Matrix.ntm
					}; //144:23 | Matrix.ntm
					output.setValue(a_row,b_collumn,num); //147:32 | Matrix.ntm
				}; //142:19 | Matrix.ntm
			}; //141:15 | Matrix.ntm
			return output; //151:15 | Matrix.ntm
		}; //134:14 | Matrix.ntm
		this.$op["*= <Matrix>"]=function(matrix){
			if(private.width!=matrix.height){
				try{
					throw new SyntaxError("Matrix A's width must be the same as Matrix B's height (where A *= B)");
				}catch(e){console.log('[31m'+e.stack+'[37m');process.exit();}; //156:24 | Matrix.ntm
			}; //155:11 | Matrix.ntm
			let new_array=[]; //159:24 | Matrix.ntm
			for(var i=0;i<private.rows;i++){
				let arr=[]; //161:22 | Matrix.ntm
				for(var j=0;j<matrix.collumns;j++){
					arr.push(0); //163:25 | Matrix.ntm
				}; //162:19 | Matrix.ntm
				new_array.push(arr); //165:27 | Matrix.ntm
			}; //160:15 | Matrix.ntm
			for(var a_row=0;a_row<private.rows;a_row++){
				for(var b_collumn=0;b_collumn<matrix.collumns;b_collumn++){
					let num=0; //170:26 | Matrix.ntm
					for(var i=0;i<private.collumns;i++){
						num+=private.array[a_row][i]*matrix.getValue(i,b_collumn); //172:24 | Matrix.ntm
					}; //171:23 | Matrix.ntm
					new_array[a_row][b_collumn]=num; //174:26 | Matrix.ntm
				}; //169:19 | Matrix.ntm
			}; //168:15 | Matrix.ntm
			private.array=new_array; //178:16 | Matrix.ntm
			private.collumns=matrix.collumns; //179:16 | Matrix.ntm
		}; //154:14 | Matrix.ntm
		$this.rows=function(){ //183:24 | Matrix.ntm
			var $12=private.array.length;
			for(var i=0;i<$12;i++){
				console.log("private.array["+(i)+"]: ",private.array[i]); //185:24 | Matrix.ntm
			}; //184:12 | Matrix.ntm
		}; //183:9 | Matrix.ntm
		$this.collumns=function(){ //189:28 | Matrix.ntm
			for(var i=0;i<private.height;i++){
				let str=""; //191:22 | Matrix.ntm
				for(var j=0;j<private.width;j++){
					str+=private.array[j][i]+", "; //193:20 | Matrix.ntm
				}; //192:19 | Matrix.ntm
				console.log("collumn "+(i)+":",str); //196:24 | Matrix.ntm
			}; //190:15 | Matrix.ntm
		}; //189:9 | Matrix.ntm
	}; //1:7 | Matrix.ntm
	plugin.Matrix=Matrix; //202:7 | Matrix.ntm
	plugin.clamp=function(value,min,max){ //10:23 | index.nt
		if(value<min){
			return min; //12:15 | index.nt
		}else if(value>max){
			return max; //14:15 | index.nt
		}else{
			return value; //16:15 | index.nt
		}; //11:7 | index.nt
	}; //10:7 | index.nt
	plugin.apply=function(){ //20:23 | index.nt
		for(let key in plugin){
			let value=plugin[key];
			if(key!="apply"){
				Math[key]=value; //23:17 | index.nt
			}; //22:11 | index.nt
		}; //21:12 | index.nt
	}; //20:7 | index.nt
return plugin;})};