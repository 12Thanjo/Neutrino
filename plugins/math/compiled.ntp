module.exports=function($pending_plugins,$get_plugin){$pending_plugins.set('math',()=>{let plugin={metadata:{"name":"math","version":"0.1.0","description":"advanced math types and functions","main":"index.nt","author":"12Thanjo","dependancies":[]}};plugin.TAU=Math.PI*2;let Vector2=function(x,y){let $this=this;let private={};this.$op={};private.x=x;Object.defineProperty(this, "x", {get: ()=>{return private.x;}});private.y=y;Object.defineProperty(this, "y", {get: ()=>{return private.y;}});$this.add=function(vector){private.x+=vector.x;private.y+=vector.y;};$this.sub=function(vector){private.x-=vector.x;private.y-=vector.y;};$this.mul=function(scalar){private.x*=scalar;private.y*=scalar;};$this.div=function(scalar){private.x/=scalar;private.y/=scalar;};$this.equal=function(vector){return vector instanceof Vector2&&private.x==vector.x&&private.y==vector.y;};$this.magnitude=function(){return Math.sqrt(private.x*private.x,private.y*private.y);};$this.distance=function(vector){let dx=private.x-vector.x;let dy=private.y-vector.y;return Math.sqrt(dx*dx,dy*dy);};};plugin.Vector2=Vector2;Vector2.normalize=function(vector){let length=vector.magnitude();;return new Vector2(vector.x/length,vector.y/length);};Vector2.dot=function(vector1,vector2){return vector1.x*vector2.x+vector1.y*vector2.y;};Vector2.cross=function(vector1,vector2){return vector1.x*vector2.y-vector1.y*vector2.x;};plugin.clamp=function(value,min,max){if(value<min){return min;}else if(value>max){return max;}else{return value;};};plugin.apply=function(){for(let key in plugin){let value=plugin[key];if(key!="apply"){Math[key]=value;};};};return plugin;})};