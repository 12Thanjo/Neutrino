struct Matrix(rows, collumns){
	// setup
	access rows = rows;
	access collumns = collumns;

	private.array = [];

	forNum(i, rows){
		local arr = [];
		forNum(j, collumns){
			arr.push(0);
		};
		private.array.push(arr);
	};


	// methods

	this.getValue = function(x, y){
		return private.array[x][y];
	};

	this.setValue = function(x, y, value){
		private.array[x][y] = value;
		return value;
	};

	this.setArray = function(array){
		if(array.length != private.rows){
			Error "Recieved array for matrix of non-same or invalid dimentions";
		};
		iterate private.array(i, collumn){
			if(collumn.length != private.collumns){
				Error "Recieved array for matrix of non-same or invalid dimentions";		
			};
		};

		private.array = array;
	};



	this.print = function(){
		return [~private.array];
	};


	this.forEach = function(func){
		forNum(i, private.rows){
			forNum(j, private.collumns){
				private.array[i][j] = func(private.array[i][j]);
			};
		};
	};

	// operations ////////////////////////////////////////////////////////////
	// addition
	operation + (Matrix, matrix){
		if(private.rows != matrix.rows || private.collumns != matrix.collumns){
			SyntaxError "Matrix Addition must be of the same dimentions";
		};

		local output = new Matrix(private.rows, private.collumns);

		for(i, private.array){
			for(j, private.array[i]){
				output.setValue(i, j, private.array[i][j] + matrix.getValue(i, j));
			};
		};

		return output;
	};

	operation += (Matrix, matrix){
		if(private.rows != matrix.rows || private.collumns != matrix.collumns){
			SyntaxError "Matrix Addition must be of the same dimentions";
		};

		for(i, private.array){
			for(j, private.array[i]){
				private.array[i][j] += matrix.getValue(i, j);
			};
		};
	};

	// subtraction
	operation - (Matrix, matrix){
		if(private.rows != matrix.rows || private.collumns != matrix.collumns){
			SyntaxError "Matrix Addition must be of the same dimentions";
		};

		local output = new Matrix(private.rows, private.collumns);

		for(i, private.array){
			for(j, private.array[i]){
				output.setValue(i, j, private.array[i][j] - matrix.getValue(i, j));
			};
		};

		return output;
	};

	operation -= (Matrix, matrix){
		if(private.rows != matrix.rows || private.collumns != matrix.collumns){
			SyntaxError "Matrix Addition must be of the same dimentions";
		};

		for(i, private.array){
			for(j, private.array[i]){
				private.array[i][j] -= matrix.getValue(i, j);
			};
		};
	};

	// multiplication
	operation * (Number, coefficient){
		local output = new Matrix(private.rows, private.collumns);
		for(i, private.array){
			for(j, private.array[i]){
				output.setValue(i, j, private.array[i][j] * coefficient);
			};
		};
	};

	operation *= (Number, coefficient){
		for(i, private.array){
			for(j, private.array[i]){
				private.array[i][j] *= coefficient;
			};
		};
	};


	operation * (Matrix, matrix){
		if(private.width != matrix.height){
			SyntaxError "Matrix A's width must be the same as Matrix B's height (where A *= B)";
		};

		local output = new Matrix(private.rows, matrix.collumns);

		forNum(a_row, private.rows){
			forNum(b_collumn, matrix.collumns){
				local num = 0;
				forNum(i, private.collumns){
					num += private.array[a_row][i] * matrix.getValue(i, b_collumn);
				};
				output.setValue(a_row, b_collumn, num);
			};
		};

		return output;
	};

	operation *= (Matrix, matrix){
		if(private.width != matrix.height){
			SyntaxError "Matrix A's width must be the same as Matrix B's height (where A *= B)";
		};

		local new_array = [];
		forNum(i, private.rows){
			local arr = [];
			forNum(j, matrix.collumns){
				arr.push(0);
			};
			new_array.push(arr);
		};

		forNum(a_row, private.rows){
			forNum(b_collumn, matrix.collumns){
				local num = 0;
				forNum(i, private.collumns){
					num += private.array[a_row][i] * matrix.getValue(i, b_collumn);
				};
				new_array[a_row][b_collumn] = num;
			};
		};

		private.array = new_array;
		private.collumns = matrix.collumns;	
	};


	this.rows = function(){
		for(i, private.array){
			console.log(|"private.array["i"]: "|, private.array[i]);
		};
	};

	this.collumns = function(){
		forNum(i, private.height){
			local str = "";
			forNum(j, private.width){
				str += private.array[j][i] + ", ";
			};

			console.log(|"collumn "i":"|, str);
		};
	};

};

plugin.Matrix = Matrix;