$pending_plugins.set('stats',()=>{let plugin={};let get_arr=function(undefined){let arr=params;if(arr.length==1){arr=params[0];};return arr;};plugin.sort=function(arr){return arr.sort((a,b)=>{return a-b;});};plugin.sum=function(arr){let count=0;for(var[i,num]of arr.entries()){count+=num;};return count;};plugin.max=function(undefined){let nums=get_arr(params);;let max=Infinity*-1;for(var[i,num]of nums.entries()){if(num>max){max=num};};return max;};plugin.min=function(undefined){let nums=get_arr(params);;let min=Infinity;for(var[i,num]of nums.entries()){if(num<min){min=num};};return min;};plugin.mean=function(undefined){let nums=get_arr(...params);;let count=plugin.sum(nums);;return count/nums.length;};plugin.median=function(undefined){let nums=get_arr(...params);;nums=plugin.sort(nums);;let half=Math.floor(nums.length/2);;if(nums.length%2==0){let a=nums[half];let b=nums[half-1];return (a+b)/2;}else{return nums[half];};};plugin.mode=function(undefined){let nums=get_arr(...params);;let counter=new Map();for(var[i,number]of nums.entries()){if(counter.has(number)==false){counter.set(number,1);}else{counter.set(number,counter.get(number)+1);};};let max=Infinity*-1;let max_value=0;for(var[key,value]of counter.entries()){if(max<value){max=value;max_value=key;};};return max_value;};plugin.range=function(undefined){let nums=get_arr(...params);;nums=plugin.sort(nums);;return [nums[0],nums[nums.length-1]];};plugin.standardDeviation=function(undefined){let nums=get_arr(...params);;let mean=plugin.mean(nums);;let square_distance_mean=0;for(var[i,num]of nums.entries()){let distance=Math.floor(num-mean);;square_distance_mean+=distance*distance;};let count=nums.length;return Math.sqrt(square_distance_mean/count);};return plugin;});