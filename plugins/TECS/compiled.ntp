module.exports=function($pending_plugins,$get_plugin){$pending_plugins.set('TECS',()=>{let plugin={metadata:{"name":"TECS","version":"0.1.3","description":"Threaded ECS architecture","main":"index.nt","author":"12Thanjo","dependancies":["structures"]}};
	let encodeStringBuffer=function(string){ //7:35 | index.nt
		let bytes=string.length; //8:16 | index.nt
		var $arr_length=string.length;
		for(var i=0;i<$arr_length;i++){
			let code=string.charCodeAt(i); //11:19 | index.nt
			if(code>127&&code<=2047){
				bytes+=1; //13:18 | index.nt
			}else if(code>2047&&code<=65535){
				bytes+=2; //15:18 | index.nt
			}; //12:11 | index.nt
			if(code>=56320&&code<=57343){
				i-=1; //18:14 | index.nt
			}; //17:11 | index.nt
		}; //10:8 | index.nt
		let buffer=new SharedArrayBuffer(bytes); //22:17 | index.nt
		let arrayBuffer=new Uint8Array(buffer); //23:22 | index.nt
		let encoded=unescape(encodeURIComponent(string)); //24:18 | index.nt
		var $arr_length=encoded.length;
		for(var i=0;i<$arr_length;i++){
			arrayBuffer[i]=encoded[i].charCodeAt(0); //27:20 | index.nt
		}; //26:8 | index.nt
		return buffer; //30:11 | index.nt
	}; //7:25 | index.nt
	let decodeStringBuffer=function(buffer){ //33:35 | index.nt
		let array=new Uint8Array(buffer); //34:16 | index.nt
		let encodedString=String.fromCharCode.apply(null,array); //35:24 | index.nt
		let decodedString=decodeURIComponent(escape(encodedString)); //36:24 | index.nt
		return decodedString; //37:11 | index.nt
	}; //33:25 | index.nt
	let Thread=null; //44:13 | index.nt
	try{
		if(Worker!=null){
			Thread=Worker; //50:15 | index.nt
		}else{
			Thread=require('worker_threads').Worker; //52:15 | index.nt
		}; //49:7 | index.nt
	}catch{
		Thread=require('worker_threads').Worker; //55:11 | index.nt
	};
	let types={
		"any":Array,
		"int8":Int8Array,
		"uint8":Uint8Array,
		"int16":Int16Array,
		"uint16":Uint16Array,
		"int32":Int32Array,
		"uint32":Uint32Array,
		"float32":Float32Array,
		"float64":Float64Array,
		"int64":BigInt64Array,
		"uint64":BigUint64Array
	}; //60:12 | index.nt
	plugin.print=true; //74:7 | index.nt
	let create_text_style=function(color,backgroundColor){ //75:34 | index.nt
		return "background-color: #"+(backgroundColor)+"; color: #"+(color)+";"; //76:11 | index.nt
	}; //75:24 | index.nt
	let log_colors={
		"Environment":"114422",
		"Component":"551155",
		"Query":"331155",
		"System":"004455"
	}; //78:17 | index.nt
	let log=function(type,name){ //84:20 | index.nt
		if(plugin.print){
			let backgroundColor=log_colors[type]; //86:30 | index.nt
			console.log("%c TECS | %c"+(type)+" %c"+(name)+" ",create_text_style("cccccc",backgroundColor),create_text_style("999999",backgroundColor),create_text_style("eebb11",backgroundColor)); //87:20 | index.nt
		}; //85:7 | index.nt
	}; //84:10 | index.nt
	plugin.all=function(...conditionals){ //93:21 | index.nt
		return (entity)=>{
			let pass=true; //95:19 | index.nt
			for(var[i,cond]of conditionals.entries()){
				if(typeof cond==="string"){
					if((entity.components.has(cond))==false){
						pass=false; //99:25 | index.nt
						break; //100:26 | index.nt
					}; //98:19 | index.nt
				}else{
					if(cond(entity)==false){
						pass=false; //104:25 | index.nt
						break; //105:26 | index.nt
					}; //103:19 | index.nt
				}; //97:15 | index.nt
			}; //96:16 | index.nt
			return pass; //109:15 | index.nt
		}; //94:11 | index.nt
	}; //93:7 | index.nt
	plugin.none=function(...conditionals){ //113:22 | index.nt
		return (entity)=>{
			let pass=true; //115:19 | index.nt
			for(var[i,cond]of conditionals.entries()){
				if(typeof cond==="string"){
					if((entity.components.has(cond))){
						pass=false; //119:25 | index.nt
						break; //120:26 | index.nt
					}; //118:19 | index.nt
				}else{
					if(cond()){
						pass=false; //124:25 | index.nt
						break; //125:26 | index.nt
					}; //123:19 | index.nt
				}; //117:15 | index.nt
			}; //116:16 | index.nt
			return pass; //129:15 | index.nt
		}; //114:11 | index.nt
	}; //113:7 | index.nt
	plugin.some=function(...conditionals){ //133:22 | index.nt
		return (entity)=>{
			let pass=false; //135:19 | index.nt
			for(var[i,cond]of conditionals.entries()){
				if(typeof cond==="string"){
					if((entity.components.has(cond))){
						pass=true; //139:25 | index.nt
						break; //140:26 | index.nt
					}; //138:19 | index.nt
				}else{
					if(cond()){
						pass=true; //144:25 | index.nt
						break; //145:26 | index.nt
					}; //143:19 | index.nt
				}; //137:15 | index.nt
			}; //136:16 | index.nt
			return pass; //149:15 | index.nt
		}; //134:11 | index.nt
	}; //133:7 | index.nt
	let Prop=function(type,auto){
		let $this=this;let private={};this.$op={};
		$this.type=type; //156:9 | index.nt
		if(auto==null){auto=0;}; //157:9 | index.nt
		$this.auto=auto; //158:9 | index.nt
	}; //155:7 | index.nt
	plugin.prop=function(type,auto){ //160:22 | index.nt
		return new Prop(type,auto); //161:11 | index.nt
	}; //160:7 | index.nt
	let num_CPUs=require('os').cpus().length-1; //164:15 | index.nt
	let Environment=function(id,config){
		let $this=this;let private={};this.$op={};Environment.$map.set(id,this);
		if(config==null){config={};}; //167:11 | index.nt
		if(config.size==null){config.size=1000;}; //168:11 | index.nt
		if(config.size>18446744073709552000){
			throw Error("Exceeded the entity limit (2^64)");
		}; //169:7 | index.nt
		if(config.threads==null){config.threads=num_CPUs;}; //172:11 | index.nt
		if(config.threads>num_CPUs){
			console.warn("TECS too many threads in Environment ("+(id)+")\ngot: ("+(config.threads)+"), max: ("+(num_CPUs)+")\ndefaulting to max"); //174:21 | index.nt
		}; //173:7 | index.nt
		private.id=id; //178:14 | index.nt
		Object.defineProperty(this, "id", {get: ()=>{return private.id;}}); //178:11 | index.nt
		private.size=config.size; //179:16 | index.nt
		Object.defineProperty(this, "size", {get: ()=>{return private.size;}}); //179:11 | index.nt
		private.threads=config.threads; //180:19 | index.nt
		Object.defineProperty(this, "threads", {get: ()=>{return private.threads;}}); //180:11 | index.nt
		let self=$this; //183:15 | index.nt
		let self_priv=private; //184:20 | index.nt
		private.buffers={}; //185:12 | index.nt
		$this.components={}; //186:9 | index.nt
		let pointer_i=0; //188:20 | index.nt
		private.pointer={}; //189:12 | index.nt
		$this.getPointer=function(entity_id){ //190:30 | index.nt
			pointer_i=entity_id; //191:18 | index.nt
			return private.pointer; //192:15 | index.nt
		}; //190:9 | index.nt
		let code='var types = {'+'"any": Array,'+'"int8": Int8Array, "uint8": Uint8Array,'+'"int16": Int16Array, "uint16": Uint16Array,'+'"int32": Int32Array, "uint32": Uint32Array,'+'"float32": Float32Array,'+'"float64": Float64Array,'+'"int64": BigInt64Array, "uint64": BigUint64Array,'+'};'+'var actions = new Map();'+'var components = {};'+'actions.set("component", (data)=>{'+'var recursive = function(buffer, target, target_parent, key){'+'if(buffer.type != null && buffer.type && typeof buffer.type == "string" && types[buffer.type]){'+'target_parent[key] = new types[buffer.type](buffer.buffer);'+'}else{'+'for(var key in buffer){'+'target[key] = {};'+'recursive(buffer[key], target[key], target, key);'+'}'+'}'+'};'+'recursive(data, components);'+'});'+'var queries = {};'+'actions.set("query", (data)=>{'+'queries[data.id] = new types[data.type](data.set);'+'});'+'var systems = {};'+'actions.set("system", (data)=>{'+'data.system = "systems[data.id] = " + data.system;'+'eval(data.system);'+'});'+'actions.set("run", (data)=>{'+'var system = systems[data.system];'+'var query = queries[data.query];'+'for(var i=data.min; i<data.max;i++){'+'system(query[i], components);'+'}'+'this.postMessage(data);'+'});'+'actions.set("log", ()=>{'+'console.log("components: ", components);'+'console.log("queries: ", queries);'+'console.log("systems: ", systems);'+'});'+'this.onmessage = function(e){'+'actions.get(e.data.type)(e.data.data);'+'};'; //2:11 | threads.ntm
		let blob=new Blob([code]); //54:11 | threads.ntm
		let obj_url=URL.createObjectURL(blob,{
			type:'text/javascript'
		}); //55:14 | threads.ntm
		if(config.threads>0){
			let {Queue}=$get_plugin('structures'); //58:11
			private.scheduler={
				workers:[],
				free_workers:new Queue(),
				tasks:new Queue(),
				waiting_tasks:new Map()
			}; //60:21 | threads.ntm
			Object.defineProperty(this, "scheduler", {get: ()=>{return private.scheduler;}}); //60:11 | threads.ntm
			for(var i=0;i<private.threads;i++){
				let new_thread=new Thread(obj_url); //68:25 | threads.ntm
				new_thread.i=i; //69:19 | threads.ntm
				new_thread.onmessage=function(e){ //70:39 | threads.ntm
					private.scheduler.free_workers.push(private.scheduler.workers[new_thread.i]); //71:48 | threads.ntm
					let task=null; //73:23 | threads.ntm
					if(private.scheduler.waiting_tasks.has(e.data.system)){
						task=private.scheduler.waiting_tasks.get(e.data.system); //75:21 | threads.ntm
					}else{
						task=private.scheduler.tasks.peek(); //77:21 | threads.ntm
					}; //74:15 | threads.ntm
					task.finished-=1; //80:17 | threads.ntm
					if(task.finished==0){
						private.scheduler.waiting_tasks.delete(task.system); //82:55 | threads.ntm
						task.callback(); //83:30 | threads.ntm
					}; //81:15 | threads.ntm
					private.scheduler.run(); //86:34 | threads.ntm
				}; //70:19 | threads.ntm
				private.scheduler.workers.push(new_thread); //88:39 | threads.ntm
				private.scheduler.free_workers.push(new_thread); //89:44 | threads.ntm
			}; //67:11 | threads.ntm
			private.scheduler.send_to_workers=function(type,data){ //92:48 | threads.ntm
				let message={
					type:type,
					data:data
				}; //93:22 | threads.ntm
				for(var[i,worker]of private.scheduler.workers.entries()){
					worker.postMessage(message); //98:31 | threads.ntm
				}; //97:16 | threads.ntm
			}; //92:12 | threads.ntm
			let Task=function(system,query,threads,size,callback){
				let $this=this;let private={};this.$op={};
				$this.system=system; //104:13 | threads.ntm
				$this.segments=new Queue(); //105:13 | threads.ntm
				$this.callback=callback; //106:13 | threads.ntm
				$this.finished=threads; //107:13 | threads.ntm
				let mod=size%threads; //109:18 | threads.ntm
				let div=(size-mod)/threads; //110:18 | threads.ntm
				let iter=0; //111:19 | threads.ntm
				for(var i=0;i<threads;i++){
					let min=iter; //113:22 | threads.ntm
					iter+=div; //114:17 | threads.ntm
					if(mod>0){
						iter+=1; //116:21 | threads.ntm
						mod-=1; //117:20 | threads.ntm
					}; //115:15 | threads.ntm
					$this.segments.push({
						system:system,
						query:query,
						min:min,
						max:iter
					}); //120:31 | threads.ntm
				}; //112:15 | threads.ntm
			}; //103:11 | threads.ntm
			private.scheduler.run=function(){ //129:36 | threads.ntm
				while(private.scheduler.free_workers.length>0&&private.scheduler.tasks.length>0){
					let worker=private.scheduler.free_workers.pop(); //131:25 | threads.ntm
					if(private.scheduler.tasks.peek().segments.length==0){
						let task=private.scheduler.tasks.pop(); //133:27 | threads.ntm
						private.scheduler.waiting_tasks.set(task.system,task); //134:52 | threads.ntm
					}; //132:15 | threads.ntm
					if(private.scheduler.tasks.length>0){
						worker.postMessage({
							type:"run",
							data:private.scheduler.tasks.peek().segments.pop()
						}); //138:35 | threads.ntm
					}; //137:15 | threads.ntm
				}; //130:14 | threads.ntm
			}; //129:12 | threads.ntm
			private.scheduler.addTask=function(system,query,threads,size,callback){ //146:40 | threads.ntm
				private.scheduler.tasks.push(new Task(system,query,threads,size,callback)); //147:37 | threads.ntm
				private.scheduler.run(); //148:30 | threads.ntm
			}; //146:12 | threads.ntm
		}; //57:3 | threads.ntm
		let Component=function(name,builder){
			let $this=this;let private={};this.$op={};Component.$map.set(name,this);
			private.name=name; //2:12 | component.ntm
			$this.builder=builder; //3:9 | component.ntm
			let recursive_component_create=function(builder,target){ //7:47 | component.ntm
				for(let key in builder){
					let value=builder[key];
					if(value instanceof Prop){
						let components=null; //10:33 | component.ntm
						if(value.type!="any"){
							let Type=types[value.type]; //12:31 | component.ntm
							let buffer=new SharedArrayBuffer(Type.BYTES_PER_ELEMENT*self_priv.size); //14:33 | component.ntm
							target.buffers[key]={
								buffer:buffer,
								type:value.type
							}; //15:27 | component.ntm
							components=new Type(buffer); //20:31 | component.ntm
						}else{
							components=new Array(self_priv.size); //22:31 | component.ntm
						}; //11:19 | component.ntm
						target.components[key]=components; //25:23 | component.ntm
						Object.defineProperty(target.pointer,key,{
							get:function(){ //29:34 | component.ntm
								return components[pointer_i]; //30:31 | component.ntm
							},
							set:function(val){ //32:34 | component.ntm
								components[pointer_i]=val; //33:35 | component.ntm
							}
						}); //28:38 | component.ntm
					}else if(typeof value==="object"){
						target.buffers[key]={}; //37:23 | component.ntm
						target.components[key]={}; //38:23 | component.ntm
						target.pointer[key]={}; //39:23 | component.ntm
						recursive_component_create(value,{
							buffers:target.buffers[key],
							components:target.components[key],
							pointer:target.pointer[key]
						}); //41:43 | component.ntm
					}else{
						throw Error("Invalid Component Builder\n"+"\tEnvironment: ("+(self_priv.id)+")\n"+"\tComponent: ("+(private.name)+")");
					}; //9:15 | component.ntm
				}; //8:16 | component.ntm
			}; //7:37 | component.ntm
			let builder_obj={}; //56:22 | component.ntm
			builder_obj[private.name]=builder; //57:16 | component.ntm
			recursive_component_create(builder_obj,{
				buffers:self_priv.buffers,
				components:self.components,
				pointer:self_priv.pointer
			}); //58:31 | component.ntm
			log("Component",name); //65:8 | component.ntm
		}; //1:8 | component.ntm
		Component.$map=new Map();Component.get=function(id){return Component.$map.get(id);};Component.has=function(id){return Component.$map.has(id);};Component.forEach=function(cb){Component.$map.forEach(cb);};Component.delete=function(cb){Component.$map.delete(cb);}; //1:8 | component.ntm
		$this.createComponent=function(name,builder){ //68:31 | component.ntm
			new Component(name,builder); //69:20 | component.ntm
			self_priv.scheduler.send_to_workers("component",self_priv.buffers); //70:40 | component.ntm
		}; //68:5 | component.ntm
		private.entities=[]; //1:8 | entity.ntm
		private.entity_id=0; //2:8 | entity.ntm
		private.removed=new Set(); //3:8 | entity.ntm
		private.entity_lookup=new Map(); //4:8 | entity.ntm
		let Entity=function(id,name){
			let $this=this;let private={};this.$op={};
			private.id=id; //8:14 | entity.ntm
			Object.defineProperty(this, "id", {get: ()=>{return private.id;}}); //8:11 | entity.ntm
			private.name=name; //9:16 | entity.ntm
			Object.defineProperty(this, "name", {get: ()=>{return private.name;}}); //9:11 | entity.ntm
			if(name!=null){
				self_priv.entity_lookup.set(name,$this); //11:36 | entity.ntm
			}; //10:7 | entity.ntm
			$this.components=new Set(); //14:9 | entity.ntm
			$this.getPointer=function(){ //16:30 | entity.ntm
				return self.getPointer(id); //17:15 | entity.ntm
			}; //16:9 | entity.ntm
			self_priv.entities[id]=$this; //20:14 | entity.ntm
			$this.bindComponent=function(component_id,...params){ //22:33 | entity.ntm
				self.bindComponent($this,component_id,...params); //23:27 | entity.ntm
			}; //22:9 | entity.ntm
			$this.hasComponent=function(component_id){ //26:32 | entity.ntm
				return $this.component.has(component_id); //27:15 | entity.ntm
			}; //26:9 | entity.ntm
		}; //7:7 | entity.ntm
		$this.createEntity=function(name){ //33:28 | entity.ntm
			let new_entity=null; //34:21 | entity.ntm
			if(private.removed.size==0){
				new_entity=new Entity(private.entity_id,name); //36:19 | entity.ntm
				private.entity_id+=1; //37:16 | entity.ntm
			}else{
				let entity_id=private.removed.values().next().value; //39:24 | entity.ntm
				private.removed.delete(entity_id); //40:31 | entity.ntm
				new_entity=new Entity(entity_id,name); //41:19 | entity.ntm
			}; //35:7 | entity.ntm
			return new_entity; //44:11 | entity.ntm
		}; //33:5 | entity.ntm
		$this.getEntity=function(name){ //46:25 | entity.ntm
			return private.entity_lookup.get(name); //47:11 | entity.ntm
		}; //46:5 | entity.ntm
		$this.bindComponent=function(entity_ref,component_id,...params){ //50:29 | entity.ntm
			let entity_id=entity_ref.id; //51:20 | entity.ntm
			let entity=private.entities[entity_id]; //52:17 | entity.ntm
			let component=Component.get(component_id); //53:20 | entity.ntm
			entity.components.add(component_id); //55:26 | entity.ntm
			let recursive_i=0; //57:22 | entity.ntm
			let recursive=function(builder,target){ //58:30 | entity.ntm
				for(let key in builder){
					let value=builder[key];
					if(value instanceof Prop){
						if(params[recursive_i]==null){
							target[key][entity_id]=value.auto; //62:27 | entity.ntm
						}else{
							target[key][entity_id]=params[recursive_i]; //64:27 | entity.ntm
						}; //61:19 | entity.ntm
						recursive_i+=1; //66:28 | entity.ntm
					}else{
						recursive(value,target[key]); //68:26 | entity.ntm
					}; //60:15 | entity.ntm
				}; //59:16 | entity.ntm
			}; //58:20 | entity.ntm
			if(component.builder instanceof Prop){
				if(params[0]==null){
					$this.components[component_id][entity_id]=component.builder.auto; //76:17 | entity.ntm
				}else{
					$this.components[component_id][entity_id]=params[0]; //78:17 | entity.ntm
				}; //75:11 | entity.ntm
			}else{
				recursive(component.builder,$this.components[component_id]); //81:18 | entity.ntm
			}; //74:7 | entity.ntm
			Query.forEach((query)=>{
				query.audit(entity); //86:20 | entity.ntm
			}); //85:18 | entity.ntm
		}; //50:5 | entity.ntm
		$this.forEach=function(event){ //90:23 | entity.ntm
			for(var[i,entity]of private.entities.entries()){
				event(i,self.components); //92:14 | entity.ntm
			}; //91:12 | entity.ntm
		}; //90:5 | entity.ntm
		let SharedSet=function(){
			let $this=this;let private={};this.$op={};
			let type=null; //3:15 | query.ntm
			private.bufferType=""; //4:22 | query.ntm
			Object.defineProperty(this, "bufferType", {get: ()=>{return private.bufferType;}}); //4:11 | query.ntm
			let size_multiply=1; //5:24 | query.ntm
			if(self_priv.size<Math.pow(2,8)-1){
				type=Uint8Array; //7:13 | query.ntm
				private.bufferType="uint8"; //8:16 | query.ntm
				size_multiply=Uint8Array.BYTES_PER_ELEMENT; //9:22 | query.ntm
			}else if(self_priv.size<Math.pow(2,16)-1){
				type=Uint16Array; //11:13 | query.ntm
				private.bufferType="uint16"; //12:16 | query.ntm
				size_multiply=Uint16Array.BYTES_PER_ELEMENT; //13:22 | query.ntm
			}else if(self_priv.size<Math.pow(2,32)-1){
				type=Uint32Array; //15:13 | query.ntm
				private.bufferType="uint32"; //16:16 | query.ntm
				size_multiply=Uint32Array.BYTES_PER_ELEMENT; //17:22 | query.ntm
			}else{
				type=BigUint64Array; //19:13 | query.ntm
				private.bufferType="uint64"; //20:16 | query.ntm
				size_multiply=BigUint64Array.BYTES_PER_ELEMENT; //21:22 | query.ntm
			}; //6:7 | query.ntm
			$this.shared=new SharedArrayBuffer(self_priv.size*size_multiply); //24:9 | query.ntm
			$this.array=new type($this.shared); //26:9 | query.ntm
			private.i=1; //28:12 | query.ntm
			$this.has=function(value){ //30:23 | query.ntm
				return $this.array.includes(value); //31:15 | query.ntm
			}; //30:9 | query.ntm
			$this.add=function(value){ //34:23 | query.ntm
				if($this.has(value)==false){
					$this.array[private.i]=value; //36:17 | query.ntm
					private.i+=1; //39:20 | query.ntm
					$this.array[0]=private.i; //40:17 | query.ntm
				}; //35:11 | query.ntm
			}; //34:9 | query.ntm
			$this.delete=function(value){ //44:26 | query.ntm
				for(var i=0;i<private.i;i++){
					if($this.array[i]==value){
						$this.array[i]=$this.array[private.i-1]; //47:21 | query.ntm
						private.i-=1; //49:24 | query.ntm
						$this.array[0]=private.i; //50:21 | query.ntm
						break; //52:22 | query.ntm
					}; //46:15 | query.ntm
				}; //45:15 | query.ntm
			}; //44:9 | query.ntm
			$this.forEach=function(event){ //57:27 | query.ntm
				for(var i=0;i<private.i;i++){
					event($this.array[i]); //59:18 | query.ntm
				}; //58:15 | query.ntm
			}; //57:9 | query.ntm
			Object.defineProperty($this,'length',{
				get:function(){ //64:22 | query.ntm
					return private.i-1; //65:19 | query.ntm
				}
			}); //63:26 | query.ntm
		}; //2:7 | query.ntm
		private.queries={}; //74:15 | query.ntm
		Object.defineProperty(this, "queries", {get: ()=>{return private.queries;}}); //74:7 | query.ntm
		let Query=function(id,conditionals,threaded){
			let $this=this;let private={};this.$op={};Query.$map.set(id,this);
			private.id=id; //76:14 | query.ntm
			Object.defineProperty(this, "id", {get: ()=>{return private.id;}}); //76:11 | query.ntm
			if(threaded==null){threaded=false;}; //77:13 | query.ntm
			if(threaded){
				$this.entities=new SharedSet(); //79:13 | query.ntm
			}else{
				$this.entities=new Set(); //81:13 | query.ntm
			}; //78:7 | query.ntm
			private.threaded=threaded; //83:20 | query.ntm
			Object.defineProperty(this, "threaded", {get: ()=>{return private.threaded;}}); //83:11 | query.ntm
			$this.conditionals=conditionals; //84:9 | query.ntm
			$this.audit=function(entity){ //88:25 | query.ntm
				if($this.conditionals(entity)){
					$this.entities.add(entity.id); //98:30 | query.ntm
				}else{
					$this.entities.delete(entity.id); //100:33 | query.ntm
				}; //97:11 | query.ntm
			}; //88:9 | query.ntm
			$this.remove=function(entity){ //104:26 | query.ntm
				$this.entities.delete(entity.id); //105:29 | query.ntm
			}; //104:9 | query.ntm
			$this.forEach=function(event){ //108:27 | query.ntm
				$this.entities.forEach(event); //109:30 | query.ntm
			}; //108:9 | query.ntm
			for(var[i,entity]of self_priv.entities.entries()){
				if(entity!=null){
					$this.audit(entity); //117:23 | query.ntm
				}; //116:11 | query.ntm
			}; //115:12 | query.ntm
			if(threaded){
				self_priv.queries[id]=$this.entities.shared; //124:18 | query.ntm
				self_priv.scheduler.send_to_workers("query",{
					id:id,
					set:$this.entities.shared,
					type:$this.entities.bufferType
				}); //125:44 | query.ntm
			}else{
				self_priv.queries[id]=$this.entities; //131:18 | query.ntm
			}; //123:7 | query.ntm
			log("Query",id); //134:8 | query.ntm
		}; //75:8 | query.ntm
		Query.$map=new Map();Query.get=function(id){return Query.$map.get(id);};Query.has=function(id){return Query.$map.has(id);};Query.forEach=function(cb){Query.$map.forEach(cb);};Query.delete=function(cb){Query.$map.delete(cb);}; //75:8 | query.ntm
		$this.createQuery=function(id,conditionals,threaded){ //137:27 | query.ntm
			new Query(id,conditionals,threaded); //138:16 | query.ntm
		}; //137:5 | query.ntm
		let System=function(id,query,event){
			let $this=this;let private={};this.$op={};System.$map.set(id,this);
			private.query=Query.get(query); //2:12 | system.ntm
			private.execute=function(list,min,max){ //4:30 | system.ntm
				for(var i=min;i<max+1;i++){
					event(list[i]); //6:18 | system.ntm
				}; //5:15 | system.ntm
			}; //4:12 | system.ntm
			$this.run=function(callback,threads){ //10:23 | system.ntm
				if(threads==null){threads=0;}; //11:16 | system.ntm
				if(private.query.threaded==false||threads==0){
					private.query.forEach((entity)=>{
						event(entity,self.components); //14:22 | system.ntm
					}); //13:34 | system.ntm
					callback(); //16:21 | system.ntm
				}else{
					self_priv.scheduler.addTask(id,private.query.id,threads,private.query.entities.length,callback); //18:40 | system.ntm
				}; //12:11 | system.ntm
			}; //10:9 | system.ntm
			self_priv.scheduler.send_to_workers("system",{
				id:id,
				system:event.toString()
			}); //22:40 | system.ntm
			log("System",id); //27:8 | system.ntm
		}; //1:8 | system.ntm
		System.$map=new Map();System.get=function(id){return System.$map.get(id);};System.has=function(id){return System.$map.has(id);};System.forEach=function(cb){System.$map.forEach(cb);};System.delete=function(cb){System.$map.delete(cb);}; //1:8 | system.ntm
		$this.createSystem=function(id,query,event){ //29:28 | system.ntm
			return new System(id,query,event); //30:11 | system.ntm
		}; //29:5 | system.ntm
		log("Environment",id); //203:8 | index.nt
	}; //165:8 | index.nt
	Environment.$map=new Map();Environment.get=function(id){return Environment.$map.get(id);};Environment.has=function(id){return Environment.$map.has(id);};Environment.forEach=function(cb){Environment.$map.forEach(cb);};Environment.delete=function(cb){Environment.$map.delete(cb);}; //165:8 | index.nt
	plugin.Environment=Environment; //205:7 | index.nt
	let EventLoop=function(name){
		let $this=this;let private={};this.$op={};EventLoop.$map.set(name,this);
		private.name=name; //211:16 | index.nt
		Object.defineProperty(this, "name", {get: ()=>{return private.name;}}); //211:11 | index.nt
		private.i=-1; //213:12 | index.nt
		private.queue=[]; //214:12 | index.nt
		$this.add=function(event){ //216:23 | index.nt
			private.queue.push(event); //217:27 | index.nt
		}; //216:9 | index.nt
		let self=$this; //220:15 | index.nt
		$this.next=function(){ //221:24 | index.nt
			private.i+=1; //222:16 | index.nt
			try{
				if(private.i<private.queue.length){
					private.queue[private.i](self.next); //225:30 | index.nt
				}else if(print){
					console.error("Attempted to go to the next event in an Event Loop when already at the end"); //227:30 | index.nt
				}; //224:15 | index.nt
			}catch(e){
				console.log(e); //230:24 | index.nt
			};
		}; //221:9 | index.nt
		$this.start=function(){ //234:25 | index.nt
			private.i=-1; //235:16 | index.nt
			$this.next(); //236:18 | index.nt
		}; //234:9 | index.nt
	}; //210:8 | index.nt
	EventLoop.$map=new Map();EventLoop.get=function(id){return EventLoop.$map.get(id);};EventLoop.has=function(id){return EventLoop.$map.has(id);};EventLoop.forEach=function(cb){EventLoop.$map.forEach(cb);};EventLoop.delete=function(cb){EventLoop.$map.delete(cb);}; //210:8 | index.nt
	{
		let Manager=function(systems,event){
			let $this=this;let private={};this.$op={};
			private.systems=systems; //243:16 | index.nt
			$this.done=function(){ //244:28 | index.nt
				private.systems-=1; //245:20 | index.nt
				if(private.systems==0){
					event(); //247:22 | index.nt
				}; //246:15 | index.nt
			}; //244:13 | index.nt
		}; //242:11 | index.nt
		EventLoop.Manager=Manager; //252:14 | index.nt
	}; //241:6 | index.nt
	plugin.EventLoop=EventLoop; //256:7 | index.nt
return plugin;})};