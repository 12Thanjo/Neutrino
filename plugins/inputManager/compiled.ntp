$pending_plugins.set('inputManager',()=>{let plugin={};let INPUT_MAP=new Map([["A",65],["B",66],["C",67],["D",68],["E",69],["F",70],["G",71],["H",72],["I",73],["J",74],["K",75],["L",76],["M",77],["N",78],["O",79],["P",80],["Q",81],["R",82],["S",83],["T",84],["U",85],["V",86],["W",87],["X",88],["Y",89],["Z",90],["ZERO",48],["ONE",49],["TWO",50],["THREE",51],["FOUR",52],["FIVE",53],["SIX",54],["SEVEN",55],["EIGHT",56],["NINE",57],["NUMPAD_0",96],["NUMPAD_1",97],["NUMPAD_2",98],["NUMPAD_3",99],["NUMPAD_4",100],["NUMPAD_5",101],["NUMPAD_6",102],["NUMPAD_7",103],["NUMPAD_8",104],["NUMPAD_9",105],["NUMPAD_MULTIPLY",106],["NUMPAD_ADD",107],["NUMPAD_ENTER",108],["NUMPAD_SUBTRACT",109],["NUMPAD_DECIMAL",110],["NUMPAD_DIVIDE",111],["F1",112],["F2",113],["F3",114],["F4",115],["F5",116],["F6",117],["F7",118],["F8",119],["F9",120],["F10",121],["F11",122],["F12",123],["F13",124],["F14",125],["F15",126],["COLON",186],["EQUALS",187],["COMMA",188],["UNDERSCORE",189],["PERIOD",190],["QUESTION_MARK",191],["TILDE",192],["OPEN_BRACKET",219],["BACKWARD_SLASH",220],["CLOSED_BRACKET",221],["QUOTES",222],["BACKSPACE",8],["TAB",9],["CLEAR",12],["ENTER",13],["SHIFT",16],["CONTROL",17],["ALT",18],["CAPS_LOCK",20],["ESCAPE",27],["SPACE",32],["PAGE_UP",33],["PAGE_DOWN",34],["END",35],["HOME",36],["LEFT",37],["UP",38],["RIGHT",39],["DOWN",40],["PLUS",43],["MINUS",44],["BREAK",19],["CONTEXT_MENU",93],["INSERT",45],["DELETE",46],["HELP",47],["NUM_LOCK",144],["SCROLL_LOCK",145],["VOLUME_UP",175],["VOLUME_DOWN",174],["PLAY_PAUSE",179],["STOP",178],["PREVIOUS_TRACK",177],["NEXT_TRACK",176],["MOUSE_LEFT",-1],["MOUSE_MIDDLE",-2],["MOUSE_RIGHT",-3],["MOUSE_BACK",-4],["MOUSE_FORWARD",-5]]); //6:16 | index.nt
let INPUTCODE_MAP=new Map([[65,"A"],[66,"B"],[67,"C"],[68,"D"],[69,"E"],[70,"F"],[71,"G"],[72,"H"],[73,"I"],[74,"J"],[75,"K"],[76,"L"],[77,"M"],[78,"N"],[79,"O"],[80,"P"],[81,"Q"],[82,"R"],[83,"S"],[84,"T"],[85,"U"],[86,"V"],[87,"W"],[88,"X"],[89,"Y"],[90,"Z"],[48,"ZERO"],[49,"ONE"],[50,"TWO"],[51,"THREE"],[52,"FOUR"],[53,"FIVE"],[54,"SIX"],[55,"SEVEN"],[56,"EIGHT"],[57,"NINE"],[96,"NUMPAD_0"],[97,"NUMPAD_1"],[98,"NUMPAD_2"],[99,"NUMPAD_3"],[100,"NUMPAD_4"],[101,"NUMPAD_5"],[102,"NUMPAD_6"],[103,"NUMPAD_7"],[104,"NUMPAD_8"],[105,"NUMPAD_9"],[106,"NUMPAD_MULTIPLY"],[107,"NUMPAD_ADD"],[108,"NUMPAD_ENTER"],[109,"NUMPAD_SUBTRACT"],[110,"NUMPAD_DECIMAL"],[111,"NUMPAD_DIVIDE"],[112,"F1"],[113,"F2"],[114,"F3"],[115,"F4"],[116,"F5"],[117,"F6"],[118,"F7"],[119,"F8"],[120,"F9"],[121,"F10"],[122,"F11"],[123,"F12"],[124,"F13"],[125,"F14"],[126,"F15"],[186,"COLON"],[187,"EQUALS"],[188,"COMMA"],[189,"UNDERSCORE"],[190,"PERIOD"],[191,"QUESTION_MARK"],[192,"TILDE"],[219,"OPEN_BRACKET"],[220,"BACKWARD_SLASH"],[221,"CLOSED_BRACKET"],[222,"QUOTES"],[8,"BACKSPACE"],[9,"TAB"],[12,"CLEAR"],[13,"ENTER"],[16,"SHIFT"],[17,"CONTROL"],[18,"ALT"],[20,"CAPS_LOCK"],[27,"ESCAPE"],[32,"SPACE"],[33,"PAGE_UP"],[34,"PAGE_DOWN"],[35,"END"],[36,"HOME"],[37,"LEFT"],[38,"UP"],[39,"RIGHT"],[40,"DOWN"],[43,"PLUS"],[44,"MINUS"],[19,"BREAK"],[93,"CONTEXT_MENU"],[45,"INSERT"],[46,"DELETE"],[47,"HELP"],[144,"NUM_LOCK"],[145,"SCROLL_LOCK"],[175,"VOLUME_UP"],[174,"VOLUME_DOWN"],[179,"PLAY_PAUSE"],[178,"STOP"],[177,"PREVIOUS_TRACK"],[176,"NEXT_TRACK"],[-1,"MOUSE_LEFT"],[-2,"MOUSE_MIDDLE"],[-3,"MOUSE_RIGHT"],[-4,"MOUSE_BACK"],[-5,"MOUSE_FORWARD"]]); //20:20 | index.nt
let INPUT_DOWN=[]; //34:17 | index.nt
let DOWN_EVENTS=[]; //35:18 | index.nt
let UP_EVENTS=[]; //36:16 | index.nt
let PRESS_EVENTS=[]; //37:19 | index.nt
let WHEEL_EVENTS=new Map(); //38:19 | index.nt
for(var i=0;i<244;i++){
	INPUT_DOWN[i]=false; //44:15 | index.nt
	DOWN_EVENTS[i]=new Map(); //45:16 | index.nt
	UP_EVENTS[i]=new Map(); //46:14 | index.nt
	PRESS_EVENTS[i]=new Map(); //47:17 | index.nt
}; //43:7 | index.nt
plugin.down=function(input){ //50:22 | index.nt
	return INPUT_DOWN[INPUT_MAP.get(input)+22]; //51:11 | index.nt
}; //50:7 | index.nt
plugin.keyboard={
	last:{
		down:null,
		up:null
	},
	capslock:null
}; //2:7 | keyboard.ntm
document.addEventListener('keydown',(e)=>{
	let code=e.which; //12:15 | keyboard.ntm
	let name=INPUTCODE_MAP.get(code); //13:15 | keyboard.ntm
	plugin.keyboard.last.down=name; //18:11 | keyboard.ntm
	plugin.keyboard.capslock=e.getModifierState("CapsLock"); //19:49 | keyboard.ntm
; //19:11 | keyboard.ntm
	if(INPUT_DOWN[code+22]==false){
		INPUT_DOWN[code+22]=true; //22:19 | keyboard.ntm
		let events=DOWN_EVENTS[code+22]; //23:21 | keyboard.ntm
		for(var[key,event]of events.entries()){
			event(); //25:18 | keyboard.ntm
		}; //24:17 | keyboard.ntm
	}; //21:7 | keyboard.ntm
	let events=PRESS_EVENTS[code+22]; //28:17 | keyboard.ntm
	for(var[key,event]of events.entries()){
		event(); //30:14 | keyboard.ntm
	}; //29:13 | keyboard.ntm
}); //11:26 | keyboard.ntm
document.addEventListener('keyup',(e)=>{
	let code=e.which; //34:15 | keyboard.ntm
	let name=INPUTCODE_MAP.get(code); //35:15 | keyboard.ntm
	INPUT_DOWN[code+22]=false; //37:15 | keyboard.ntm
	plugin.keyboard.last.up=name; //39:11 | keyboard.ntm
	let events=UP_EVENTS[code+22]; //41:17 | keyboard.ntm
	for(var[key,event]of events.entries()){
		event(); //43:14 | keyboard.ntm
	}; //42:13 | keyboard.ntm
}); //33:26 | keyboard.ntm
document.dispatchEvent(new KeyboardEvent('keydown',{})); //47:23 | keyboard.ntm
plugin.mouse={}; //1:7 | mouse.ntm
let set_mouse_position=function(e){ //3:35 | mouse.ntm
	plugin.mouse.x=e.clientX; //4:11 | mouse.ntm
	plugin.mouse.y=e.clientY; //5:11 | mouse.ntm
	plugin.mouse.screenX=e.screenX; //6:11 | mouse.ntm
	plugin.mouse.screenY=e.screenY; //7:11 | mouse.ntm
}; //3:25 | mouse.ntm
document.addEventListener("pointermove",set_mouse_position); //12:26 | mouse.ntm
document.addEventListener('pointerdown',(e)=>{
	set_mouse_position(e); //17:23 | mouse.ntm
	let code=e.which*-1; //20:15 | mouse.ntm
	let name=INPUTCODE_MAP.get(code); //21:15 | mouse.ntm
	INPUT_DOWN[code]=true; //24:15 | mouse.ntm
	let events=DOWN_EVENTS[code+22]; //26:17 | mouse.ntm
	for(var[key,event]of events.entries()){
		event(); //28:14 | mouse.ntm
	}; //27:13 | mouse.ntm
}); //16:26 | mouse.ntm
document.addEventListener('pointerup',(e)=>{
	set_mouse_position(e); //34:23 | mouse.ntm
	let code=e.which*-1; //37:15 | mouse.ntm
	let name=INPUTCODE_MAP.get(code); //38:15 | mouse.ntm
	INPUT_DOWN[code]=false; //40:15 | mouse.ntm
	let events=UP_EVENTS[code+22]; //41:17 | mouse.ntm
	for(var[key,event]of events.entries()){
		event(); //43:14 | mouse.ntm
	}; //42:13 | mouse.ntm
}); //33:26 | mouse.ntm
document.addEventListener('wheel',(e)=>{
	set_mouse_position(e); //49:23 | mouse.ntm
	plugin.mouse.wheelX=e.wheelDeltaX; //51:11 | mouse.ntm
	plugin.mouse.wheelY=e.wheelDeltaY; //52:11 | mouse.ntm
	for(var[key,event]of WHEEL_EVENTS.entries()){
		event(); //55:14 | mouse.ntm
	}; //54:13 | mouse.ntm
}); //48:26 | mouse.ntm
plugin.gamepad={}; //1:7 | gamepad.ntm
window.addEventListener('gamepadconnected',(e)=>{
	console.log("gamepad connected: "+e.gamepad.index); //4:16 | gamepad.ntm
}); //3:24 | gamepad.ntm
let Event=function(id,trigger,event){
	let private={};Event.$map.set(id,this);
	private.id=id; //63:12 | index.nt
	this.event=event; //64:9 | index.nt
	this.trigger=trigger; //65:9 | index.nt
	private.inputs=[]; //67:12 | index.nt
	if(typeof trigger.input=="string"){
		private.inputs.push(INPUT_MAP.get(trigger.input)+22); //69:28 | index.nt
	}else{
		for(var[key,value]of trigger.input.entries()){
			private.inputs.push(INPUT_MAP.get(value)+22); //72:32 | index.nt
		}; //71:17 | index.nt
	}; //68:7 | index.nt
	if(trigger.type=="wheel"){
		WHEEL_EVENTS.set(private.id,event); //78:25 | index.nt
	}else{
		let event_arr=null; //80:24 | index.nt
		let event_insert=function(){ //81:37 | index.nt
					}; //81:27 | index.nt
		if(trigger.type=="down"){
			event_arr=DOWN_EVENTS; //83:22 | index.nt
			event_insert=function(){ //84:35 | index.nt
				let pass=true; //85:27 | index.nt
				for(var[key,value]of private.inputs.entries()){
					if(INPUT_DOWN[value]==false){
						pass=false; //88:29 | index.nt
						break; //89:30 | index.nt
					}; //87:23 | index.nt
				}; //86:25 | index.nt
				if(pass){
					event(); //94:26 | index.nt
				}; //93:19 | index.nt
			}; //84:25 | index.nt
		}else if(trigger.type=="up"){
			event_arr=UP_EVENTS; //98:22 | index.nt
			event_insert=function(){ //99:35 | index.nt
				let pass=1; //100:27 | index.nt
				for(var[key,value]of private.inputs.entries()){
					if(INPUT_DOWN[value]==false){
						pass-=1; //103:29 | index.nt
					}; //102:23 | index.nt
				}; //101:25 | index.nt
				if(pass==0){
					event(); //108:26 | index.nt
				}; //107:19 | index.nt
			}; //99:25 | index.nt
		}else if(trigger.type=="press"){
			event_arr=PRESS_EVENTS; //112:22 | index.nt
			event_insert=function(){ //113:35 | index.nt
				let pass=true; //114:27 | index.nt
				for(var[key,value]of private.inputs.entries()){
					if(INPUT_DOWN[value]==false){
						pass=false; //117:29 | index.nt
						break; //118:30 | index.nt
					}; //116:23 | index.nt
				}; //115:25 | index.nt
				if(pass){
					event(); //123:26 | index.nt
				}; //122:19 | index.nt
			}; //113:25 | index.nt
		}else{
			throw ReferenceError("\n\tinputManager: trigger type ("+(trigger.type)+") is invalid");
		}; //82:11 | index.nt
		for(var[key,value]of private.inputs.entries()){
			event_arr[value].set(private.id,event_insert); //132:33 | index.nt
		}; //131:17 | index.nt
	}; //77:7 | index.nt
}; //62:7 | index.nt
Event.$map=new Map();Event.get=function(id){return Event.$map.get(id);};Event.has=function(id){return Event.$map.has(id);};Event.forEach=function(cb){Event.$map.forEach(cb);};Event.delete=function(cb){Event.$map.delete(cb);}; //62:7 | index.nt
plugin.event={}; //141:7 | index.nt
plugin.event.add=function(id,trigger,event){ //143:27 | index.nt
	new Event(id,trigger,event); //144:10 | index.nt
}; //143:7 | index.nt
plugin.event.delete=function(id){ //161:30 | index.nt
	let trigger=Event.get(id).trigger; //162:18 | index.nt
	if(trigger.type=="down"){
		DOWN_EVENTS[INPUT_MAP.get(trigger.input)+22].delete(id); //164:61 | index.nt
	}else if(trigger.type=="up"){
		UP_EVENTS[INPUT_MAP.get(trigger.input)+22].delete(id); //166:59 | index.nt
	}else if(trigger.type=="press"){
		PRESS_EVENTS[INPUT_MAP.get(trigger.input)+22].delete(id); //168:62 | index.nt
	}else if(trigger.type=="wheel"){
		WHEEL_EVENTS.delete(id); //170:28 | index.nt
	}; //163:7 | index.nt
	Event.delete(id); //172:17 | index.nt
}; //161:7 | index.nt
plugin.metadata={"name":"inputManager","version":"0.1.0","description":"manages inputs for keyboard, mouse, and gamepad","main":"index.nt","author":"12Thanjo","dependancies":[]};return plugin;});