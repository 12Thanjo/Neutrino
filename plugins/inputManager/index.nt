// plugin: inputManager
// description: manages inputs for keyboard, mouse, and gamepad
// author: 12Thanjo


local INPUT_MAP = new Map([
	["A",65],["B",66],["C",67],["D",68],["E",69],["F",70],["G",71],["H",72],["I",73],["J",74],["K",75],["L",76],["M",77],["N",78],["O",79],["P",80],["Q",81],["R",82],["S",83],["T",84],["U",85],["V",86],["W",87],["X",88],["Y",89],["Z",90],
	["ZERO",48],["ONE",49],["TWO",50],["THREE",51],["FOUR",52],["FIVE",53],["SIX",54],["SEVEN",55],["EIGHT",56],["NINE",57],["NUMPAD_0",96],
	["NUMPAD_1",97],["NUMPAD_2",98],["NUMPAD_3",99],["NUMPAD_4",100],["NUMPAD_5",101],["NUMPAD_6",102],["NUMPAD_7",103],["NUMPAD_8",104],["NUMPAD_9",105],
	["NUMPAD_MULTIPLY",106],["NUMPAD_ADD",107],["NUMPAD_ENTER",108],["NUMPAD_SUBTRACT",109],["NUMPAD_DECIMAL",110],["NUMPAD_DIVIDE",111],
	["F1",112],["F2",113],["F3",114],["F4",115],["F5",116],["F6",117],["F7",118],["F8",119],["F9",120],["F10",121],["F11",122],["F12",123],["F13",124],["F14",125],["F15",126],
	["COLON",186],["EQUALS",187],["COMMA",188],["UNDERSCORE",189],["PERIOD",190],["QUESTION_MARK",191],["TILDE",192],["OPEN_BRACKET",219],["BACKWARD_SLASH",220],["CLOSED_BRACKET",221],["QUOTES",222],["BACKSPACE",8],["TAB",9],["CLEAR",12],
	["ENTER",13],["SHIFT",16],["CONTROL",17],["ALT",18],["CAPS_LOCK",20],["ESCAPE",27],["SPACE",32],
	["PAGE_UP",33],["PAGE_DOWN",34],["END",35],["HOME",36],["LEFT",37],["UP",38],["RIGHT",39],["DOWN",40],["PLUS",43],["MINUS",44],
	["BREAK",19],["CONTEXT_MENU",93],["INSERT",45],["DELETE",46],["HELP",47],["NUM_LOCK",144],["SCROLL_LOCK",145],
	["VOLUME_UP",175],["VOLUME_DOWN",174],["PLAY_PAUSE",179],["STOP",178],["PREVIOUS_TRACK",177],["NEXT_TRACK",176],

	["MOUSE_LEFT",-1],["MOUSE_MIDDLE",-2],["MOUSE_RIGHT",-3],["MOUSE_BACK",-4],["MOUSE_FORWARD",-5], // MOUSE

	["XBOX_A",-22],["XBOX_B",-21],["XBOX_X",-20],["XBOX_Y",-19],["LB",-18],["RB",-17],["LT",-16],["RT",-15],["VIEW",-14],["MENU",-13],["L_STICK",-12],["R_STICK",-11],["D_UP",-10],["D_DOWN",-9],["D_LEFT",-8],["D_RIGHT",-7],["XBOX",-6], //XBOX
	["PS_X",-22],["PS_O",-21],["SQUARE",-20],["TRIANGLE",-19],["L1",-18],["R1",-17],["L2",-16],["R2",-15],["SHARE",-14],["OPTION",-13],["PLAYSTATION",-6], //PLAYSTATION
]);
local INPUTCODE_MAP = new Map([
	[65,"A"],[66,"B"],[67,"C"],[68,"D"],[69,"E"],[70,"F"],[71,"G"],[72,"H"],[73,"I"],[74,"J"],[75,"K"],[76,"L"],[77,"M"],[78,"N"],[79,"O"],[80,"P"],[81,"Q"],[82,"R"],[83,"S"],[84,"T"],[85,"U"],[86,"V"],[87,"W"],[88,"X"],[89,"Y"],[90,"Z"],
	[48,"ZERO"],[49,"ONE"],[50,"TWO"],[51,"THREE"],[52,"FOUR"],[53,"FIVE"],[54,"SIX"],[55,"SEVEN"],[56,"EIGHT"],[57,"NINE"],[96,"NUMPAD_0"],
	[97,"NUMPAD_1"],[98,"NUMPAD_2"],[99,"NUMPAD_3"],[100,"NUMPAD_4"],[101,"NUMPAD_5"],[102,"NUMPAD_6"],[103,"NUMPAD_7"],[104,"NUMPAD_8"],[105,"NUMPAD_9"],
	[106,"NUMPAD_MULTIPLY"],[107,"NUMPAD_ADD"],[108,"NUMPAD_ENTER"],[109,"NUMPAD_SUBTRACT"],[110,"NUMPAD_DECIMAL"],[111,"NUMPAD_DIVIDE"],
	[112,"F1"],[113,"F2"],[114,"F3"],[115,"F4"],[116,"F5"],[117,"F6"],[118,"F7"],[119,"F8"],[120,"F9"],[121,"F10"],[122,"F11"],[123,"F12"],[124,"F13"],[125,"F14"],[126,"F15"],
	[186,"COLON"],[187,"EQUALS"],[188,"COMMA"],[189,"UNDERSCORE"],[190,"PERIOD"],[191,"QUESTION_MARK"],[192,"TILDE"],[219,"OPEN_BRACKET"],[220,"BACKWARD_SLASH"],[221,"CLOSED_BRACKET"],[222,"QUOTES"],[8,"BACKSPACE"],[9,"TAB"],[12,"CLEAR"],
	[13,"ENTER"],[16,"SHIFT"],[17,"CONTROL"],[18,"ALT"],[20,"CAPS_LOCK"],[27,"ESCAPE"],[32,"SPACE"],
	[33,"PAGE_UP"],[34,"PAGE_DOWN"],[35,"END"],[36,"HOME"],[37,"LEFT"],[38,"UP"],[39,"RIGHT"],[40,"DOWN"],[43,"PLUS"],[44,"MINUS"],
	[19,"BREAK"],[93,"CONTEXT_MENU"],[45,"INSERT"],[46,"DELETE"],[47,"HELP"],[144,"NUM_LOCK"],[145,"SCROLL_LOCK"],
	[175,"VOLUME_UP"],[174,"VOLUME_DOWN"],[179,"PLAY_PAUSE"],[178,"STOP"],[177,"PREVIOUS_TRACK"],[176,"NEXT_TRACK"],

	[-1,"MOUSE_LEFT"],[-2,"MOUSE_MIDDLE"],[-3,"MOUSE_RIGHT"],[-4,"MOUSE_BACK"],[-5,"MOUSE_FORWARD"], // MOUSE

	[-22,"XBOX_A"],[-21,"XBOX_B"],[-20,"XBOX_X"],[-19,"XBOX_Y"],[-18,"LB"],[-17,"RB"],[-16,"LT"],[-15,"RT"],[-14,"VIEW"],[-13,"MENU"],[-12,"L_STICK"],[-11,"R_STICK"],[-10,"D_UP"],[-9,"D_DOWN"],[-8,"D_LEFT"],[-7,"D_RIGHT"],[-6,"XBOX"], //XBOX
	[-22,"PS_X"],[-21,"PS_O"],[-20,"SQUARE"],[-19,"TRIANGLE"],[-18,"L1"],[-17,"R1"],[-16,"L2"],[-15,"R2"],[-14,"SHARE"],[-13,"OPTION"],[-6,"PLAYSTATION"], //PLAYSTATION
]);
local INPUT_DOWN = [];
local DOWN_EVENTS = [];
local UP_EVENTS = [];
local PRESS_EVENTS = [];
local WHEEL_EVENTS = new Map();
// the greatest keycode I have is 222
// -1 to -5 are mouse keys
// -6 to -22 are controller inputs
// so 244 inputs total
forNum(i, 244){
	INPUT_DOWN[i] = false;
	DOWN_EVENTS[i] = new Map();
	UP_EVENTS[i] = new Map();
	PRESS_EVENTS[i] = new Map();
};

plugin.down = function(input){
	return INPUT_DOWN[INPUT_MAP.get(input) + 22];
};

/////////////////////////////////////////////////////////////////////////////////////////////

macro "keyboard";
macro "mouse";
macro "gamepad";

/////////////////////////////////////////////////////////////////////////////////////////////

species Event(id, trigger, events){
	private.id = id;

	private.inputs = [];
	if(trigger typeof "string"){
		if(INPUT_MAP.has(trigger) == false){
			ReferenceError |"("trigger") is not a valid input trigger"|;
		};
		private.inputs.push(INPUT_MAP.get(trigger) + 22);
	}else{
		itterate trigger(key, value){
			if(INPUT_MAP.has(value) == false){
				ReferenceError |"("value") is not a valid input trigger"|;
			};	
			private.inputs.push(INPUT_MAP.get(value) + 22);
		};
	};


	events.down default @()->{};
	events.up default @()->{};
	events.press default @()->{};


	this.events = events;



	itterate private.inputs(key, value){
		DOWN_EVENTS[value].set(private.id, @()->{
			local pass = true;
			itterate private.inputs(key, value){
				if(INPUT_DOWN[value] == false){
					pass = false;
					break;
				};
			};

			if(pass){
				this.events.down();
			};
		});


		UP_EVENTS[value].set(private.id, @()->{
			local pass = 1;
			itterate private.inputs(key, value){
				if(INPUT_DOWN[value] == false){
					pass -= 1;
				};
			};

			if(pass == 0){
				this.events.up();
			};
		});

		PRESS_EVENTS[value].set(private.id, @()->{
			local pass = true;
			itterate private.inputs(key, value){
				if(INPUT_DOWN[value] == false){
					pass = false;
					break;
				};
			};

			if(pass){
				this.events.press();
			};
		});
	};
};


plugin.Event = Event;


plugin.wheel = {
	add: function(id, event){
		WHEEL_EVENTS.set(id, event);
	},
	remove: function(id){
		WHEEL_EVENTS.set(id);
	},
};