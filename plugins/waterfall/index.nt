// plugin: waterfall
// description: HTTP request parser
// author: 12Thanjo

struct Header(key, value){
	this.key = key;
	this.value = value;
};

struct Cookie(key, value){
	this.key = key;
	this.value = value;
	this.delete = false;
};


local parse_cookies = function(req_cookies){
	local cookies_split = req_cookies.split("; ");
	local cookies = {};
	iterate cookies_split(i, cookie){
		local equals = cookie.indexOf('=');
		local left = cookie.slice(0, equals);
		local right = cookie.slice(equals+1, cookie.lenght);
		cookies[left] = right;
	};
	return cookies;
};


local stringify_cookies = function(cookies){
	local header = [];
	cookies.forEach(@(cookie)->{
		if(cookie.delete){
			header.push(|cookie.key"=; max-age=0"|);
		}else{
			header.push(|cookie.key"="cookie.value"; SameSite=None;"|);
		};
	});
	return header;
};



//////////////////////////////////////////////

import files;
macro "MIME";

local http = require('http');
local parse = require('querystring').parse;


plugin = function(PORT, handler){
	console.log("PORT: ", PORT);
	handler default function(req, res){
		res.header('Content-Type', 'application/json');
		delete req.original;
		res.send(JSON.stringify({request: req}));
	};

	http.createServer(@(request, response)->{
		local headers = request.headers;
		local method = request.method;
		local url = request.url;

		local ip = "";
		if(request.headers['x-forwarded-for']){
		    ip = request.headers['x-forwarded-for'].split(",").pop();
		}else if(request.connection && request.connection.remoteAddress) {
		    ip = request.connection.remoteAddress;
		};

		local raw_body = [];

		request.on('error', @(err)->{
			cmd.log(err, cmd.color.red);
		}).on('data', @(chunk)->{
			raw_body.push(chunk);
		}).on('end', @()->{
			// setup req /////////////////////////////////////////////////////////////////////
			local recieved_time = process.hrtime();
			local req = {
				host: headers.host,
				ip: ip,
				headers: headers,
				method: method,

				query: {},
				body: {},
				cookies: {},

				recieved: Date.now(),
				recieved_ns: recieved_time[0] * (1000 * 1000 * 1000) + recieved_time[1],
				parsingTime: null,

				reject: false,

				// original: request,
			};

			raw_body = Buffer.concat(raw_body).toString();
			if(headers['content-type'] == "application/json"){
				req.body = JSON.parse(raw_body);
			}else{
				req.body = parse(raw_body);
			};


			// parse body
			local questionmark = url.indexOf("?");
			if(questionmark != -1){
				req.path = url.slice(0, questionmark);
				req.query = parse( url.slice(questionmark+1, url.length) );
			}else{
				req.path = url;
			};

			// parse cookies
			local cookies = new Map();
			if(headers.cookie){
				req.cookies = parse_cookies(headers.cookie);
				forKeys req.cookies(key, value){
					cookies.set(key, new Cookie(key, value));
				};
			};


			// setup res ////////////////////////////////////////////////////////////////////////
			
			local headers_list = [];
			local send_str = "";
			local lock = false;
			local lock_send_str = function(str){
				send_str = str;
				lock = true;
			};
			local add_to_send_str = function(str){
				if(lock == false){
					send_str += str;
				};
			};

			local res = {
				statusCode: 200,
				send: function(data){
					add_to_send_str(data);
				},
				sendFile: function(path){
					if(files.fileExists(path)){
						lock_send_str(files.readFile(path));
						local ext = files.getFileExtention(path);
						res.header('Content-Type', MIME[ext] || ext);
					}else{
						local err = |"File ("path") does not exist"|;
						ReferenceError err;
					};
				},
				sendJSON: function(json){
					res.header('Content-Type', 'application/json');
					lock_send_str(JSON.stringify(json));
				},
				redirect: function(url){
					res.statusCode = 302;
					lock_send_str("");
					response.setHeader("Location", url);
				},
				header: function(key, value){
					headers_list.push(new Header(key, value));
				},
				cors: function(){
					response.setHeader("Access-Control-Allow-Origin", "*");
					response.setHeader("Access-Control-Allow-Credentials", "true");
					response.setHeader("Access-Control-Allow-Methods", "GET,HEAD,OPTIONS,POST,PUT");
					response.setHeader("Access-Control-Allow-Headers", "Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers");
				},
				cookies: {
					add: function(key, value){
						if(cookies.has(key) == false){
							cookies.set(key, new Cookie(key, value));
						}else{
							ReferenceError |"Cookie ("key") already exists.\nDid you mean: res.cookie.update"|;
						};
					},
					update: function(key, value){
						if(cookies.has(key)){
							cookies.get(key).value = value;
						}else{
							ReferenceError |"Cookie ("key") does not exist.\nDid you mean: res.cookie.add"|;
						};
					},
					set: function(key, value){
						if(cookies.has(key)){
							// update
							cookies.get(key).value = value;
						}else{
							// add
							cookies.set(key, new Cookie(key, value));
						};
					},
					destroy: function(key){
						if(cookies.has(key)){
							cookies.get(key).delete = true;
						}else{
							ReferenceError |"Cookie ("key") does not exist."|;
						};
					},
					print: function(){
						local output = {};
						cookies.forEach(@(cookie)->{
							output[cookie.key] = cookie.value;
						});
						return output;
					},

					// this will removed by ferry
					remove: function(key){
						cookies.delete(key);
					},
				},
				original: response
			};


			// handler ////////////////////////////////////////////////////////////////////////

			local diff = process.hrtime(recieved_time);
			req.parsingTime = diff[0] * (1000  * 1000 * 1000) + diff[1];
			delete req.recieved_ns;

			handler(req, res);

			if(req.reject == false){
				if(req.cookies != {}){
					response.setHeader('Set-Cookie', stringify_cookies(cookies));
				};

				response.statusCode = res.statusCode;
				// response.setHeader('Content-Type', 'application/json');


				headers_list.forEach(@(header)->{
					response.setHeader(header.key, header.value);

				});
				response.end(send_str);
			};
		});
	}).listen(PORT);

	console.log("Started HTTP server on port: " + PORT);
};