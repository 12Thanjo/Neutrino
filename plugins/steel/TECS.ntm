// this.environment = new OCS.Environment(private.name);


// // components //////////////////////////////////////////////////////////////
// this.environment.bindComponent(new OCS.Component("position", {
// 	x: new Prop(0),
// 	y: new Prop(0),
// 	z: new Prop(0),
// }));

// this.environment.bindComponent(new OCS.Component("scale", {
// 	x: new Prop(1),
// 	y: new Prop(1),
// 	z: new Prop(1),
// }));
// this.environment.bindComponent(new OCS.Component("rotation", {
// 	x: new Prop(0),
// 	y: new Prop(0),
// 	z: new Prop(0),
// }));

// local renderTarget = new OCS.Component("renderTarget", new Prop(null));
// this.environment.bindComponent(renderTarget);


// // systems //////////////////////////////////////////////////////////////
// // position
// this.environment.createQuery('position', all('position', 'renderTarget'));
// local position = this.environment.createSystem('position', 'position', @(entity)->{
// 	entity.renderTarget.position.x = entity.position.x;
// 	entity.renderTarget.position.z = entity.position.y;
// 	entity.renderTarget.position.y = entity.position.z;
// });


// // scale
// this.environment.createQuery('scale', all('scale', 'renderTarget'));
// local scale = this.environment.createSystem('scale', 'scale', @(entity)->{
// 	entity.renderTarget.scaling.x = entity.scale.x;
// 	entity.renderTarget.scaling.z = entity.scale.y;
// 	entity.renderTarget.scaling.y = entity.scale.z;
// });


// // rotation
// Math.Tau = Math.PI*2;
// this.environment.createQuery('rotation', all('rotation', 'renderTarget'));
// local rotation = this.environment.createSystem('rotation', 'rotation', @(entity)->{
// 	entity.rotation.z %= Math.Tau; 
// 	entity.rotation.x %= Math.Tau;
// 	entity.rotation.y %= Math.Tau;
// 	entity.renderTarget.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(
// 		entity.rotation.z, 
// 		entity.rotation.x,
// 		entity.rotation.y
// 	);
// });

this.environment = new TECS.Environment(private.name, {
	size: config.size,
	threads: config.threads
});



// components //////////////////////////////////////////////////////////////

this.environment.createComponent("position", {
	x: prop("float64"),
	y: prop("float64"),
	z: prop("float64")
});

this.environment.createComponent("scale", {
	x: prop("float64", 1),
	y: prop("float64", 1),
	z: prop("float64", 1)
});

this.environment.createComponent("rotation", {
	x: prop("float64"),
	y: prop("float64"),
	z: prop("float64")
});

this.environment.createComponent("renderTarget", prop("any"));


// systems //////////////////////////////////////////////////////////////

// position
this.environment.createQuery("position", ["position", "renderTarget"]);
local position = this.environment.createSystem("position", "position", @(id, components)->{
	local render_position = components.renderTarget[i].position;
	local entity_position = components.position[i];

	render_position.x = entity_position.x;
	render_position.z = entity_position.y;
	render_position.y = entity_position.z;
});

// scale
this.environment.createQuery("scale", ["scale", "renderTarget"]);
local scale = this.environment.createSystem("scale", "scale", @(id, components)->{
	local render_scale = components.renderTarget[i].scale;
	local entity_scale = components.scale[i];

	render_scale.x = entity_scale.x;
	render_scale.z = entity_scale.y;
	render_scale.y = entity_scale.z;
});

// rotation
this.environment.createQuery("rotation", ["rotation", "renderTarget"]);
local rotation = this.environment.createSystem("rotation", "rotation", @(id, components)->{
	local entity_rotation = components.rotation[i];


	entity_rotation.z %= Math.TAU;
	entity_rotation.x %= Math.TAU;
	entity_rotation.y %= Math.TAU;
	components.renderTarget[i].rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(
		entity_rotation.z, 
		entity_rotation.x,
		entity_rotation.y
	);
});
