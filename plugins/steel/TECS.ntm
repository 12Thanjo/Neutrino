
// TECS.print = false;

this.environment = new TECS.Environment(private.name, {
	size: config.size,
	threads: config.threads
});



// components //////////////////////////////////////////////////////////////

this.environment.createComponent("position", {
	x: prop("float64"),
	y: prop("float64"),
	z: prop("float64")
});

this.environment.createComponent("scale", {
	x: prop("float64", 1),
	y: prop("float64", 1),
	z: prop("float64", 1)
});

this.environment.createComponent("rotation", {
	x: prop("float64"),
	y: prop("float64"),
	z: prop("float64")
});

this.environment.createComponent("renderTarget", prop("any"));


// systems //////////////////////////////////////////////////////////////

// position
this.environment.createQuery("position", all("position", "renderTarget"));
local position = this.environment.createSystem("position", "position", @(id, components)->{
	local render_position = components.renderTarget[id].position;

	render_position.x = components.position.x[id];
	render_position.z = components.position.y[id];
	render_position.y = components.position.z[id];
});

// scale
this.environment.createQuery("scale", all("scale", "renderTarget"));
local scale = this.environment.createSystem("scale", "scale", @(id, components)->{
	local render_scale = components.renderTarget[id].scale;

	render_scale.x = components.scale.x[id];
	render_scale.z = components.scale.y[id];
	render_scale.y = components.scale.z[id];
});

// rotation
this.environment.createQuery("rotation", all("rotation", "renderTarget"));
local rotation = this.environment.createSystem("rotation", "rotation", @(id, components)->{


	components.rotation.z[id] %= Math.TAU;
	components.rotation.x[id] %= Math.TAU;
	components.rotation.y[id] %= Math.TAU;
	components.renderTarget[id].rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(
		components.rotation.z[id], 
		components.rotation.x[id],
		components.rotation.y[id]
	);
});
