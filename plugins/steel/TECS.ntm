// this.environment = new OCS.Environment(private.name);


// // components //////////////////////////////////////////////////////////////
// this.environment.bindComponent(new OCS.Component("position", {
// 	x: new Prop(0),
// 	y: new Prop(0),
// 	z: new Prop(0),
// }));

// this.environment.bindComponent(new OCS.Component("scale", {
// 	x: new Prop(1),
// 	y: new Prop(1),
// 	z: new Prop(1),
// }));
// this.environment.bindComponent(new OCS.Component("rotation", {
// 	x: new Prop(0),
// 	y: new Prop(0),
// 	z: new Prop(0),
// }));

// local renderTarget = new OCS.Component("renderTarget", new Prop(null));
// this.environment.bindComponent(renderTarget);


// // systems //////////////////////////////////////////////////////////////
// // position
// this.environment.createQuery('position', all('position', 'renderTarget'));
// local position = this.environment.createSystem('position', 'position', @(entity)->{
// 	entity.renderTarget.position.x = entity.position.x;
// 	entity.renderTarget.position.z = entity.position.y;
// 	entity.renderTarget.position.y = entity.position.z;
// });


// // scale
// this.environment.createQuery('scale', all('scale', 'renderTarget'));
// local scale = this.environment.createSystem('scale', 'scale', @(entity)->{
// 	entity.renderTarget.scaling.x = entity.scale.x;
// 	entity.renderTarget.scaling.z = entity.scale.y;
// 	entity.renderTarget.scaling.y = entity.scale.z;
// });


// // rotation
// Math.Tau = Math.PI*2;
// this.environment.createQuery('rotation', all('rotation', 'renderTarget'));
// local rotation = this.environment.createSystem('rotation', 'rotation', @(entity)->{
// 	entity.rotation.z %= Math.Tau; 
// 	entity.rotation.x %= Math.Tau;
// 	entity.rotation.y %= Math.Tau;
// 	entity.renderTarget.rotationQuaternion = BABYLON.Quaternion.RotationYawPitchRoll(
// 		entity.rotation.z, 
// 		entity.rotation.x,
// 		entity.rotation.y
// 	);
// });

this.environment = new TECS.Environment(private.name, {
	size: config.size,
	threads: config.threads
});


// components //////////////////////////////////////////////////////////////




// systems //////////////////////////////////////////////////////////////

